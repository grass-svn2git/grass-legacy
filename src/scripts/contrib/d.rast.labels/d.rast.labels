#!/bin/bash
# Labels vectors using the attribute value or the category value
# written by Markus Neteler 2001
#            neteler@itc.it
#
# $Id$

if test "$GISBASE" = ""; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi   
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

TMP=drastlabelstmp$$
cleanup()
{
 g.remove vect=$TMP 2>&1> /dev/null
}

# what to do in case of user break:
exitprocedure()
{
 echo "User break!"
 cleanup
 exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

if [ "$1" = "-help" -o "$1" = "help" -o "$1" = "-h" ]
then
 echo "Description:"
 echo "  Labels vectors using the attribute value or the category value"
 echo ""
 echo "Usage:"
 echo ""
 echo "d.rast.labels [-smv] map=name [attr=name] [size=value] [color=name]"
 echo "  [backgr=name] [border=name] [font=name]"
 echo ""
 echo "Flags:
  -s   save support sites file
  -m   mark labels on the map
  -v   Verbose mode

Parameters:
     map   Name of vector file
    attr   Type of attribute to use for labels
           options: string,cat,coords
           default: string
    size   Size of text \(pixels\)
           default: 10
   color   Text color
           options: red,orange,yellow,green,blue,indigo,violet,white,black,
                    gray,brown,magenta,aqua,grey
           default: white
  backgr   Background color
           options: none,red,orange,yellow,green,blue,indigo,violet,white,
                    black,gray,brown,magenta,aqua,grey
           default: none
  border   Border color
           options: none,red,orange,yellow,green,blue,indigo,violet,white,
                    black,gray,brown,magenta,aqua,grey
           default: none
    font   Fontname
           options: cyrilc,gothgbt,gothgrt,gothitt,greekc,greekcs,greekp,
                    greeks,italicc,italiccs,italict,romanc,romancs,romand,
                    romans,romant,scriptc,scripts
           default: romans
"
 exit 1
fi

gotitMAP=0

for i
do
	case $i in
		m=*|ma=*|map=*)
		map=`echo $i | awk -F '=' '{print $2}'` ;
                            gotitMAP=1;
                            eval `g.findfile element=cell file=$map` ;
                            map="${fullname}" ;
                            MAP="${name}" ;
                            if [ "$map" = "" ] ; then
                               echo "ERROR: map raster map [`echo $i | awk -F '=' '{print $2}'`] does not exist."
                               exit 1
                            fi ;;
		a=*|at=*|att=*|attr=*)
		attr=`echo $i | awk -F '=' '{print $2}'` ;;
		s=*|si=*|siz=*|size=*)
		size=`echo $i | awk -F '=' '{print $2}'` ;;
		c=*|co=*|col=*|colo=*|color=*)
		color=`echo $i | awk -F '=' '{print $2}'` ;;	
		ba=*|bac=*|back=*|backg=*|backgr=*)
		backgr=`echo $i | awk -F '=' '{print $2}'` ;;	
		bo=*|bor=*|bord=*|borde=*|border=*)
		border=`echo $i | awk -F '=' '{print $2}'` ;;	
		f=*|fo=*|fon=*|font=*)
		font=`echo $i | awk -F '=' '{print $2}'` ;;
		-s) SAVESITES=1 ;;
		-m) MARK=1 ;;
		-v) VERBOSE=1 ;;
		*)
		map=`echo $i` ;
                            gotitMAP=1;
                            eval `g.findfile element=cell file=$map` ;
                            map="${fullname}" ;
                            MAP="${name}" ;
                            if [ "$map" = "" ] ; then
                               echo "ERROR: Please check the parameters."
                               exit 1
                            fi ;;

	esac
done

#query map map only when in interactive mode:
if [ $gotitMAP -eq 0 ] ; then
 while test $gotitMAP -eq 0 
  do
   echo ""
   g.ask type=old element=cell desc=raster prompt="Enter raster map" unixfile=/tmp/$$
   eval `cat /tmp/$$`
   rm -f /tmp/$$
   map="${fullname}"
   MAP="${name}"
   echo "$map"
   gotitMAP=1
  done
fi

# in case of skipped map map, reset gotitMAP:
if [ $gotitMAP -eq 1 -a ! "$map" ]
then
 gotitMAP=0
fi

if [ $gotitMAP -eq 1 ]
then
 # echo -n "Generating temporal vector polygons..."
 r.poly $map out=$TMP > /dev/null
 v.support map=$TMP 1>&2> /dev/null

 if test $attr ; then ATTR="attr=$attr" ; fi
 if test $size ; then SIZE="size=$size" ; fi
 if test $color ; then COL="color=$color" ; fi
 if test $backgr ; then BACKGR="backgr=$backgr" ; fi
 if test $border ; then BORDER="border=$border" ; fi
 if test $font ; then FONT="font=$font" ; fi
 if test $SAVESITES ; then SAVESITES="-s" ; fi
 if test $MARK ; then MARK="-m" ; fi
 if test $VERBOSE ; then VERBOSE="-v" ; fi
 d.vect.labels $SAVESITES $MARK $VERBOSE $TMP $ATTR $SIZE $COL $BACKGR $BORDER $FONT 2>&1> /dev/null
 cleanup
 exit 0
fi

