#!/bin/sh
#
# $Id$
#
############################################################################
#
# MODULE:	g.mlist
# AUTHOR(S):	Huidae Cho - grass@geni.cemtlo.com
# PURPOSE:	applied regular expression and wildcard to g.list
# COPYRIGHT:	(C) 2000 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################

#%Module
#%  description: Apply regular expressions and wildcards to g.list
#%End
#%flag
#%  key: r
#%  description: use regular expression instead of wildcard
#%end
#%option
#% key: type
#% type: string
#% description: data type (rast, vect, or sites)
#% answer: rast
#% required : no
#%end
#%option
#% key: mapset
#% type: string
#% description: mapset to list (default: current mapset search path)
#% required : no
#%end
#%option
#% key: sep
#% type: string
#% description: output separator (default: newline)
#% required : no
#%end
#%option
#% key: pattern
#% type: string
#% description: map name search pattern, must be 'quoted'. (default: all)
#% answer: *
#% required : no
#%end

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec $GISBASE/etc/bin/cmd/g.parser "$0" "$@"
fi

if test "$GISBASE" = ""; then
    echo "You must be in GRASS GIS to run this program." >&2
    exit 1
fi

eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

#echo "Note:"
#echo "  Do not forget to enclose expression with '...' to avoid being expanded"
#echo "  by the shell first."

type="$GIS_OPT_type"
mapset="$GIS_OPT_mapset"
sep="$GIS_OPT_sep"
search="$GIS_OPT_pattern"

if [ "$mapset" = "(null)" ] ; then
#    echo using current mapset
    mapset="$MAPSET"
fi
if [ "$sep" = "(null)" ] ; then
#    echo using "\n" as separator
    sep=""
fi


if [ $GIS_FLAG_r -ne 1 ] ; then
#    echo wildcard
    search="^`echo \"$search\" | sed 's/\./\\\\./g; s/?/./g; s/*/.*/g; s/|/$|^/g'`$"
#else
#    echo regex, as is
fi

for i in `g.list type=$type mapset=$mapset | grep -v '^-\+$' | grep -v "files available" | grep -v "available in mapset"`
do
    if [ ! "$search" ] ; then
	list="$list $i"
    else
	list="$list `echo $i | grep \"$search\"`"
    fi
done

if [ ! "$list" ] ; then
    exit 1
fi

start=
i=""
for i in $list
do
    if [ "$start" ] ; then
	if [ ! "$sep" ] ; then
	    printf "\n"
	else
	    printf "%s" "$sep"
	fi
    fi
    start=1
    printf "%s" "$i"
done

if test $i
then
    echo ""
fi

exit 0

