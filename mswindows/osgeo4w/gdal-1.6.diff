Index: nmake.opt
===================================================================
--- nmake.opt	(revision 17458)
+++ nmake.opt	(working copy)
@@ -22,8 +22,8 @@
 # 1200 = 6.0
 #
 !IFNDEF MSVC_VER
-#assume msvc 7.1
-MSVC_VER=1310
+#assume msvc 9.0
+MSVC_VER=1500
 !ENDIF
 
 ###############################################################################
@@ -39,11 +39,11 @@
 # But the paths *should* be absolute (relative paths mess up in submakefiles).
 
 !IFNDEF GDAL_HOME
-GDAL_HOME = "C:\warmerda\bld"
+GDAL_HOME = $(OSGEO4W_ROOT)
 !ENDIF
 BINDIR = $(GDAL_HOME)\bin
 PLUGINDIR = $(BINDIR)\gdalplugins
-PY_INST_DIR = $(GDAL_HOME)\pymod
+PY_INST_DIR = $(GDAL_HOME)\apps\Python25\lib\site-packages
 LIBDIR = $(GDAL_HOME)\lib
 INCDIR = $(GDAL_HOME)\include
 DATADIR = $(GDAL_HOME)\data
@@ -52,7 +52,7 @@
 # Set this to the installed directory containing python.  If you don't
 # have python just let it point to a directory that does not exist (as now).
 !IFNDEF PYDIR 
-PYDIR   =	"C:\Software\Python24"
+PYDIR = $(OSGEO4W_ROOT)\apps\Python25
 !ENDIF
 
 # Set the location of your SWIG installation
@@ -77,7 +77,7 @@
 !IFNDEF OPTFLAGS
 !IF $(MSVC_VER) >= 1400
 !IFNDEF DEBUG
-OPTFLAGS= /nologo /MD /EHsc /Ox /W3 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /DNDEBUG
+OPTFLAGS= /nologo /MD /EHsc /Zi /Ox /W3 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /DNDEBUG /Fd$(GDAL_ROOT)\gdal$(VERSION).pdb
 !ELSE
 OPTFLAGS= /nologo /MD /EHsc /Zi /W4 /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /Fd$(GDAL_ROOT)\gdal$(VERSION).pdb
 !ENDIF
Index: ogr/ogrsf_frmts/grass/ogrgrassdatasource.cpp
===================================================================
--- ogr/ogrsf_frmts/grass/ogrgrassdatasource.cpp	(revision 17458)
+++ ogr/ogrsf_frmts/grass/ogrgrassdatasource.cpp	(working copy)
@@ -31,6 +31,10 @@
 #include "cpl_conv.h"
 #include "cpl_string.h"
 
+#ifdef WIN32
+#include <fcntl.h>
+#endif
+
 CPL_CVSID("$Id$");
 
 /************************************************************************/
@@ -187,6 +191,9 @@
 /* -------------------------------------------------------------------- */
     Vect_set_fatal_error ( GV_FATAL_PRINT ); // Print error and continue
     Vect_set_open_level (2);
+#ifdef WIN32
+    _set_fmode(_O_BINARY);
+#endif
     int level = Vect_open_old ( &map, pszMap, pszMapset);
 
     if ( level < 2 ) {
Index: ogr/ogrsf_frmts/grass/makefile.vc
===================================================================
--- ogr/ogrsf_frmts/grass/makefile.vc	(revision 0)
+++ ogr/ogrsf_frmts/grass/makefile.vc	(revision 0)
@@ -0,0 +1,33 @@
+GRASS_BASE     = $(OSGEO4W_ROOT)\apps\grass\grass-$(GRASS_VERSION)
+SRC            = ogrgrassdriver.cpp ogrgrassdatasource.cpp ogrgrasslayer.obj
+OBJ            = ogrgrassdriver.obj ogrgrassdatasource.obj ogrgrasslayer.obj
+PLUGIN_DLL     = ogr_GRASS.dll
+CFLAGS         = /nologo /MD /EHsc /Od /Zi /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /DNDEBUG \
+                       -I $(OSGEO4W_ROOT)/apps/gdal-16/include \
+                       -I $(OSGEO4W_ROOT)/include -I $(GRASS_BASE)/include \
+                       -D GRASS_GISBASE=\"$(OSGEO4W_ROOT)\\apps\\grass\\grass-$(GRASS_VERSION)\"
+GRASS_LIBS     = /LIBPATH:$(GRASS_BASE)/lib $(OSGEO4W_ROOT)/apps/gdal-16/lib/gdal_i.lib grass_gis.lib grass_vect.lib grass_dbmibase.lib grass_dbmiclient.lib grass_gproj.lib
+PLUGIN_DIR     = $(OSGEO4W_ROOT)\apps\gdal-16\bin\gdalplugins
+
+#GRASS_LIBS    = /LIBPATH:$(GRASS_BASE)/lib /LIBPATH:$(OSGEO4W_ROOT)/lib gdal_i.lib grass_gis.lib grass_vect.lib grass_dbmibase.lib grass_dbmiclient.lib grass_gproj.lib
+#PLUGIN_DIR    = $(OSGEO4W_ROOT)\bin\gdalplugins
+
+plugin: $(PLUGIN_DLL)
+
+$(PLUGIN_DLL): $(OBJ)
+       link /debug /dll $(LDEBUG) /out:$(PLUGIN_DLL) $(OBJ) $(GDALLIB) $(GRASS_LIBS)
+       if exist $(PLUGIN_DLL).manifest mt -manifest $(PLUGIN_DLL).manifest -outputresource:$(PLUGIN_DLL);2
+       xcopy $(PLUGIN_DLL) $(PLUGIN_DIR) /y
+
+.cpp.obj:      
+       $(CC) $(CFLAGS) /c $*.cpp
+
+default:       $(OBJ)
+       xcopy /D  /Y *.obj ..\o
+
+clean:
+       -del *.obj
+
+plugin-install: $(PLUGIN_DLL)
+       -mkdir $(PLUGINDIR)
+       $(INSTALL) $(PLUGIN_DLL) $(PLUGINDIR)
Index: ogr/ogrfeature.cpp
===================================================================
--- ogr/ogrfeature.cpp	(revision 17458)
+++ ogr/ogrfeature.cpp	(working copy)
@@ -976,8 +976,7 @@
 const char *OGRFeature::GetFieldAsString( int iField )
 
 {
-#define TEMP_BUFFER_SIZE 80
-    char         szTempBuffer[TEMP_BUFFER_SIZE];
+    char szTempBufferSize[80];
 
     CPLFree(m_pszTmpFieldValue);
     m_pszTmpFieldValue = NULL;            
@@ -989,7 +988,7 @@
         switch (iSpecialField)
         {
           case SPF_FID:
-            snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "%ld", GetFID() );
+            snprintf( szTempBuffer, sizeof szTempBufferSize, "%ld", GetFID() );
             return m_pszTmpFieldValue = CPLStrdup( szTempBuffer );
 
           case SPF_OGR_GEOMETRY:
@@ -1038,7 +1037,7 @@
     }
     else if( poFDefn->GetType() == OFTInteger )
     {
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE,
+        snprintf( szTempBuffer, sizeof szTempBufferSize,
                   "%d", pauFields[iField].Integer );
         return m_pszTmpFieldValue = CPLStrdup( szTempBuffer );
     }
@@ -1054,14 +1053,14 @@
         else
             strcpy( szFormat, "%.15g" );
         
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE,
+        snprintf( szTempBuffer, sizeof szTempBufferSize,
                   szFormat, pauFields[iField].Real );
         
         return m_pszTmpFieldValue = CPLStrdup( szTempBuffer );
     }
     else if( poFDefn->GetType() == OFTDateTime )
     {
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE,
+        snprintf( szTempBuffer, sizeof szTempBufferSize,
                   "%04d/%02d/%02d %2d:%02d:%02d", 
                   pauFields[iField].Date.Year,
                   pauFields[iField].Date.Month,
@@ -1086,17 +1085,17 @@
 
             if( nMinutes == 0 )
                 snprintf( szTempBuffer+strlen(szTempBuffer), 
-                          TEMP_BUFFER_SIZE-strlen(szTempBuffer), "%02d", nHours );
+                          sizeof szTempBufferSize-strlen(szTempBuffer), "%02d", nHours );
             else
                 snprintf( szTempBuffer+strlen(szTempBuffer), 
-                          TEMP_BUFFER_SIZE-strlen(szTempBuffer), "%02d%02d", nHours, nMinutes );
+                          sizeof szTempBufferSize-strlen(szTempBuffer), "%02d%02d", nHours, nMinutes );
         }
 
         return m_pszTmpFieldValue = CPLStrdup( szTempBuffer );
     }
     else if( poFDefn->GetType() == OFTDate )
     {
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "%04d/%02d/%02d",
+        snprintf( szTempBuffer, sizeof szTempBufferSize, "%04d/%02d/%02d",
                   pauFields[iField].Date.Year,
                   pauFields[iField].Date.Month,
                   pauFields[iField].Date.Day );
@@ -1105,7 +1104,7 @@
     }
     else if( poFDefn->GetType() == OFTTime )
     {
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "%2d:%02d:%02d", 
+        snprintf( szTempBuffer, sizeof szTempBufferSize, "%2d:%02d:%02d", 
                   pauFields[iField].Date.Hour,
                   pauFields[iField].Date.Minute,
                   pauFields[iField].Date.Second );
@@ -1117,7 +1116,7 @@
         char    szItem[32];
         int     i, nCount = pauFields[iField].IntegerList.nCount;
 
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "(%d:", nCount );
+        snprintf( szTempBuffer, sizeof szTempBufferSize, "(%d:", nCount );
         for( i = 0; i < nCount; i++ )
         {
             snprintf( szItem, sizeof(szItem), "%d",
@@ -1155,7 +1154,7 @@
         else
             strcpy( szFormat, "%.16g" );
         
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "(%d:", nCount );
+        snprintf( szTempBuffer, sizeof szTempBufferSize, "(%d:", nCount );
         for( i = 0; i < nCount; i++ )
         {
             snprintf( szItem, sizeof(szItem), szFormat,
@@ -1183,7 +1182,7 @@
     {
         int     i, nCount = pauFields[iField].StringList.nCount;
 
-        snprintf( szTempBuffer, TEMP_BUFFER_SIZE, "(%d:", nCount );
+        snprintf( szTempBuffer, sizeof szTempBufferSize, "(%d:", nCount );
         for( i = 0; i < nCount; i++ )
         {
             const char  *pszItem = pauFields[iField].StringList.paList[i];
@@ -1228,7 +1227,6 @@
     }
     else
         return "";
-#undef TEMP_BUFFER_SIZE
 }
 
 /************************************************************************/
Index: frmts/grass/makefile.vc
===================================================================
--- frmts/grass/makefile.vc	(revision 0)
+++ frmts/grass/makefile.vc	(revision 0)
@@ -0,0 +1,32 @@
+SRC            = grass57dataset.cpp
+OBJ            = grass57dataset.obj
+PLUGIN_DLL     = gdal_GRASS.dll
+LDEBUG         = /debug 
+
+CFLAGS         = -I $(OSGEO4W_ROOT)\apps\grass\grass-$(GRASS_VERSION)\include -I $(OSGEO4W_ROOT)\apps\gdal-16\include -I $(OSGEO4W_ROOT)\include /MD /EHsc
+GRASS_LIBS     = /LIBPATH:$(OSGEO4W_ROOT)\apps\grass\grass-$(GRASS_VERSION)\lib $(OSGEO4W_ROOT)\apps\gdal-16\lib\gdal_i.lib grass_gis.lib grass_i.lib grass_gproj.lib
+PLUGINDIR      = $(OSGEO4W_ROOT)\apps\gdal-16\bin\gdalplugins
+
+#CFLAGS        = -I $(OSGEO4W_ROOT)\include -I $(OSGEO4W_ROOT)\apps\grass\grass-$(GRASS_VERSION)\include /MD /EHsc /Od /Zi /DNDEBUG /Fdgdal_GRASS.pdb
+#GRASS_LIBS    = /LIBPATH:c:/OSGeo4W/apps/grass/grass-$(GRASS_VERSION)/lib /LIBPATH:C:/OSGeo4W/lib gdal_i.lib grass_gis.lib grass_i.lib grass_gproj.lib
+#PLUGINDIR     = $(OSGEO4W_ROOT)\bin\gdalplugins
+
+plugin: $(PLUGIN_DLL)
+
+$(PLUGIN_DLL): $(OBJ)
+	link /dll $(LDEBUG) /out:$(PLUGIN_DLL) $(OBJ) $(GDALLIB) $(GRASS_LIBS)
+	if exist $(PLUGIN_DLL).manifest mt -manifest $(PLUGIN_DLL).manifest -outputresource:$(PLUGIN_DLL);2
+	xcopy $(PLUGIN_DLL) $(PLUGINDIR) /y
+
+$(OBJ): $(SRC)
+	$(CC) $(CFLAGS) /c $(SRC)
+
+default:       $(OBJ)
+	xcopy /D  /Y *.obj ..\o
+
+clean:
+       -del *.obj *.manifest *.dll *.lib *.exp *.pdb
+
+plugin-install: $(PLUGIN_DLL)
+       -mkdir $(PLUGINDIR)
+       $(INSTALL) $(PLUGIN_DLL) $(PLUGINDIR)
