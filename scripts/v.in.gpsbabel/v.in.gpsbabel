#!/bin/sh
# 
############################################################################
#
# MODULE:      v.in.gpsbabel
#
# PURPOSE:     Import GPS data from a GPS receiver or file into a GRASS
#	       vector map using gpsbabel
#
# COPYRIGHT:   (c) 2000-2006 the GRASS Development Team
#	       This program is free software under the GNU General Public
#	       License (>=v2). Read the file COPYING that comes with GRASS
#	       for details.
#
# AUTHORS:     Claudio Porta & Lucio Davide Spano, students of Computer 
#		  Science, University of Pisa (Italy).
#		Commission from Faunalia Pontedera (PI)
#
#		Based on v.in.garmin for GRASS 6 by Hamish Bowman
#		and v.in.garmin.sh for GRASS 5 by Andreas Lange
#
#############################################################################
#
# REQUIREMENTS:
#      -  gpsbabel from:
#	     http://gpsbabel.sourceforge.net
#      -  unix tools: grep, cat, tac, cut, paste, awk/nawk/gawk, sed
#      -  cs2cs from PROJ.4    http://proj.maptools.org/
#
#      - report supported formats:
#	 gpsbabel -^2 | tr '\t' ';' | sort -t';' -k3
#
#############################################################################

#%Module
#%  description: Download Waypoints, Routes, and Tracks from a GPS receiver or a GPS ascii file into a vector map.
#%  keywords: vector, import, GPS
#%End
#%flag
#%  key: v
#%  description: verbose mode
#%end
#%flag
#%  key: w
#%  description: upload Waypoints from GPS
#%end
#%flag
#%  key: r
#%  description: upload Routes from GPS
#%end
#%flag
#%  key: t
#%  description: upload Track from GPS
#%end
#%flag
#%  key: p
#%  description: force vertices of track or route data as points
#%end
#%flag
#%  key: k
#%  description: do not attempt projection transform from WGS84
#%end
#%option
#% key: input
#% type: string
#% description: device or file used to import data
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new,vector,vector
#% description: name for new vector map (omit for display to stdout)
#% required : no
#%end
#%option
#% key: format
#% type: string
#% description: format of GPS input data (use gpsbabel supported formats)
#% required: yes
#%end
#%option
#% key: proj
#% type: string
#% description: projection of input data (use PROJ.4 options), if not set the input is assumed to be Lat/Lon WGS84
#% required: no
#%end

if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

# set environment so that awk works properly in all languages
unset LC_ALL
export LC_NUMERIC=C

eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION="$GISDBASE"/"$LOCATION_NAME"/"$MAPSET"

PROG=`basename $0`
# linea modificata  

#### check for gpsbabel 
 if [ ! -x "`which gpsbabel`" ] ; then
    echo "$PROG: The gpsbabel program was not found, please install it first." 1>&2
    echo "       http://gpsbabel.sourceforge.net" 1>&2
    exit 1
fi

#### check for cs2cs
if [ ! -x "`which cs2cs`" ] ; then
    echo "$PROG: The cs2cs program was not found, please install it first." 1>&2
    echo "       http://proj.maptools.org" 1>&2
    exit 1
fi

#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    echo "$PROG: awk is required, please install awk or gawk first." 1>&2
    exit 1
fi

#### set temporary files
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    echo "ERROR: unable to create temporary files" 1>&2
    exit 1
fi

#### trap ctrl-c so that we can clean up tmp
trap 'rm -f ${TMP}.*' 2 3 15


#### process command line arguments 
WPT=1 ; RTE=0 ; TRK=0 ; KEEP_WGS84=0; VERBOSE=0


if [ $GIS_FLAG_V -eq 1 ] ; then
    VERBOSE=1
    PROGVERBOSE="-D 1"
fi

if [ -n "$GIS_OPT_OUTPUT" ] ; then
    NAME="$GIS_OPT_OUTPUT"
    if [ $VERBOSE -eq 1 ] ; then
	echo "output=$NAME" 1>&2
    fi
fi
if [ -n "$GIS_OPT_INPUT" ] ; then
    GPSdevice="-f $GIS_OPT_INPUT"
    if [ $VERBOSE -eq 1 ] ; then
	echo "file=$GIS_OPT_INPUT" 1>&2
    fi
fi


if [ $GIS_FLAG_W -eq 1 ] && ([ $GIS_FLAG_R -eq 1 ] || [ $GIS_FLAG_T -eq 1 ]) ; then
    echo "One feature at a time please. Use v.patch if you need to combine them."
    rm -f ${TMP}.*
    exit 1
fi
# logic eludes me at pressent..  [combine with above]
if [ $GIS_FLAG_R -eq 1 ] && [ $GIS_FLAG_T -eq 1 ] ; then
    echo "One feature at a time please. Use v.patch if you need to combine them."
    rm -f ${TMP}.*
    exit 1
fi

CREATE_POINTS=0

if [ $GIS_FLAG_W -eq 1 ] ; then
    WPT=1
    CREATE_POINTS=1
fi
if [ $GIS_FLAG_R -eq 1 ] ; then
    WPT=0
    RTE=1
    CREATE_POINTS=0
fi
if [ $GIS_FLAG_T -eq 1 ] ; then
    WPT=0
    TRK=1
    CREATE_POINTS=0
fi

if [ $GIS_FLAG_P -eq 1 ] ; then
    CREATE_POINTS=1
fi
if [ $GIS_FLAG_K -eq 1 ] ; then
    KEEP_WGS84=1
fi

if [ $GIS_FLAG_W -eq 0 ] && [ $GIS_FLAG_R -eq 0 ] && [ $GIS_FLAG_T -eq 0 ] ; then
	CREATE_POINTS=1
	WPT=1
fi


#### set up projection info
if [ -n "$GIS_OPT_PROJ"] ; then
    IN_PROJ="+proj=longlat +towgs84=0.000,0.000,0.000"
else
    IN_PROJ="$GIS_OPT_PROJ"
fi
g.proj -jf > $TMP.tmp
read OUT_PROJ < $TMP.tmp

g.region -p | grep projection | cut -f2 -d" " > $TMP.tmp
read PROJ_TYPE < $TMP.tmp

if [ $PROJ_TYPE -eq 0 ] && [ $KEEP_WGS84 -ne 1 ] ; then
    echo "Cannot project to a XY location." 1>&2
    rm -f ${TMP}.*
    exit 1
fi

STYLE="$GISBASE/etc/grass_write_ascii.style"

# How to do it
#
# gpsbabel [options] -i INTYPE -f INFILE -o OUTTYPE -F OUTFILE
# gpsbabel [options] -i INTYPE -o OUTTYPE INFILE [OUTFILE]
#
#(GPX file example):
# gpsbabel -w -i gpx -o xcsv,style=grass_write_ascii.style outfile.csv

#### receive data ... modificato

if [ $CREATE_POINTS -eq 1 ] ; then
    echo "Downloading Waypoints from GPS" 1>&2
    gpsbabel -w -i $GIS_OPT_FORMAT $GPSdevice $PROGVERBOSE -o xcsv,style="$STYLE" -F "$TMP".gpst
    EXITCODE=$?
else
    if [ $RTE -eq 1 ] ; then
	echo "Downloading Routes from GPS" 1>&2
	gpsbabel -r -i $GIS_OPT_FORMAT $GPSdevice $PROGVERBOSE -o gpx,style="$STYLE" -F "$TMP".gpx
	EXITCODE=$?
    fi
    if [ $TRK -eq 1 ] ; then
	echo "Downloading Tracks from GPS" 1>&2
	gpsbabel -t -i $GIS_OPT_FORMAT $GPSdevice $PROGVERBOSE -o gpx,style="$STYLE" -F "$TMP".gpx
	EXITCODE=$?
    fi
fi

#### check success/failure
if [ $EXITCODE -ne 0 ] ; then
    echo "$PROG: Error retrieving data" 1>&2
    rm -f ${TMP}.*
    exit 1
fi


###################################
if [ $CREATE_POINTS -eq 1 ] ; then
###################################

    if [ $WPT -eq 1 ] ; then
	# linea modificata
	cat "${TMP}.gpst" | cut -f 1,2 -d '|'| tr '|' ' '  > "$TMP".base
	cat "${TMP}.gpst" | tr '+' '|' | cut -f3,4,5,6 -d '|'> "$TMP".attributes
    fi
    if [ $RTE -eq 1 ] ; then
	# linea modificata
	cat "${TMP}.gpst" | cut -f 1,2 -d '|'| tr '|' ' '  > "$TMP".base
	cat "${TMP}.gpst" | tr '+' '|' | cut -f3,4,5,6 -d '|'> "$TMP".attributes
    fi
    if [ $TRK -eq 1 ] ; then
       # linea modificata
	cat "${TMP}.gpst" | cut -f 1,2 -d '|'| tr '|' ' '  > "$TMP".base
	cat "${TMP}.gpst" | tr '+' '|' | cut -f3,4,5,6 -d '|'> "$TMP".attributes
    fi

    #### reproject if needed
    # linea modificata

    if [ "$IN_PROJ" = "$OUT_PROJ" ] || [ $KEEP_WGS84 -eq 1 ] ; then
	echo "No projection transformation performed" 1>&2
	cp "${TMP}.base" "${TMP}.P_base"
    else
	echo "Attempting waypoint projection transform with cs2cs" 1>&2
	cs2cs -f %.7f $IN_PROJ +to $OUT_PROJ < "${TMP}.base" > "${TMP}.P_base"
	EXITCODE=$?
	# check if transform REALLY worked (e.g. when the grid file is not found)
	if [ -n "`head -n 1 "${TMP}.P_base" | grep "^*"`" ] ; then
	    EXITCODE=1
	fi
	if [ $EXITCODE -ne 0 ] ; then
	    echo "Projection transform failed, retaining WGS84" 1>&2
	    cp -f "${TMP}.base" "${TMP}.P_base"
	fi
    fi
    # linea modificata
    cat "${TMP}.P_base" | awk '{print $1 "|" $2}' > "${TMP}.vertices"

    #### and put back together
    # wpt list:   x|y|<attr1>|...|<attr n>
    paste -d"|" "$TMP".vertices "$TMP".attributes > "$TMP".asc


    if [ -z "$NAME" ] ; then
	echo "ASCII file redirected to stdout" 1>&2
	cat "${TMP}.asc" 2> /dev/null
    else
	#### import into new ascii points file
	if [ $WPT -eq 1 ] ; then
	    echo "Importing Waypoints..."
	    #linea modificata
	    cat "${TMP}.asc" | v.in.ascii output="$NAME" cat=0 \
#HB#???? fix:: see v.in.garmin & edit grass.style
		columns='x double precision, y double precision, altitude double precision, creatdate varchar(10), time varchar(11), comments varchar(40)'
	    EXITCODE=$?
	fi
	if [ $RTE -eq 1 ] ; then
	    echo "Importing Routes as points..."
	    #linea modificata
	    cat "${TMP}.asc" | v.in.ascii output="$NAME" cat=0 \
		columns='x double precision, y double precision, altitude double precision, creatdate varchar(10), time varchar(11), comments varchar(40)'
	    EXITCODE=$?
	fi
	if [ $TRK -eq 1 ] ; then
	    echo "Importing Track as points..."
	    #linea modificata
	    cat "${TMP}.asc" | v.in.ascii output="$NAME" cat=0 \
		columns='x double precision, y double precision, altitude double precision, creatdate varchar(10), time varchar(11), comments varchar(40)'
	EXITCODE=$?
	fi

	if [ $EXITCODE -ne 0 ] ; then
	    echo "$PROG: Error importing data" 1>&2
	    rm -f ${TMP}.*
	    exit 1
	fi

    fi


#####################
else # CREATE_LINES
#####################

    #### prepare line components
    if [ $RTE -eq 1 ] ; then
	
	# this part is quite difficult using gpx... I'll explain all I've done
	# if someone has any suggest please mail!!!!

	# list of bytes where routes finish
	cat "$TMP.gpx" | grep -n "</rte>" > "$TMP.bytes"
	# number of routes
	cat "$TMP.bytes" | grep -c "</rte>" > "$TMP.var"
	ROUTE_NUMBER=0 
	read ROUTE_NUMBER < "$TMP.var" # route number to process
	READ_BYTES=0 # offset of bytes already read
	cp "$TMP.gpx" "$TMP.gpx2" # file to be "eaten" by head commands in while 
	ROUTE_ID=0 # route identifier
	while (($ROUTE_NUMBER>0)); do
	    head -n 1 "$TMP.bytes" | cut -f 1 -d ':'> "$TMP.var"
	    END_BYTE=0
	    read END_BYTE < "$TMP.var" # this route ends at END_BYTE in $TMP.gpx file
	    TO_READ=0
	    ((TO_READ=$END_BYTE-$READ_BYTES)) # bytes to read from $TMP.gpx2 file 
	    ((READ_BYTES=$READ_BYTES+$TO_READ))# update readed bytes
	    # list of points in route
	    head -n $TO_READ "$TMP.gpx2" | grep "<rtept" > "$TMP.points" 
	    POINTS=0 # number of points in route
	    cat "$TMP.points" | grep -c "<rtept" > "$TMP.var"
	    read POINTS < "$TMP.var"
	    echo "L $POINTS 1" >> "$TMP.base"
	    # read lat lon data
	    cat "$TMP.points" |cut -f2 -d'<'| cut -f2,3 -d ' ' | cut -f2,4 -d '"'|tr '"' '\t'> "$TMP.latlon"
	    cat "$TMP.latlon" |tr ',' '.'| awk '{printf(" %s %s\n", $2, $1) }'>> "$TMP.base"
	    # create attribute line
	    head -n $TO_READ "$TMP.gpx2"| grep -n "<rtept" | head -n 1| cut -f1 -d ':'> "$TMP.var"
	    OFFSET=0
	    read OFFSET < "$TMP.var"
	    head -n $OFFSET "$TMP.gpx2"> "$TMP.rte_attr"
	    # read needed attributes
	    ((ROUTE_ID++))
	    cat "$TMP.rte_attr"| grep "<number" | tail -n 1 | cut -f2 -d'<' | cut -f2 -d'>' > "$TMP.var"
	    NUMBER=0
	    read NUMBER < "$TMP.var" # read the route number
	    cat "$TMP.rte_attr"| grep "<name" | tail -n 1 | cut -f2 -d'<' | cut -f2 -d'>' > "$TMP.var"
	    R_NAME=""
	    read R_NAME < "$TMP.var" # read the route name
	    ((OFFSET=$TO_READ-$OFFSET))
	    head -n$TO_READ "$TMP.gpx2" | tail -n$OFFSET | grep "<name" | head -n 1 | cut -f2 -d'<' | cut -f2 -d'>' > "$TMP.var"
	    START_PNT=""
	    read START_PNT < "$TMP.var" # read the name of start point
	    echo -e "$ROUTE_ID \t$NUMBER \t$R_NAME \t$START_PNT ">> "$TMP.route_atts"
	    ((ROUTE_NUMBER--))
	    # eat files
	    tail -n $ROUTE_NUMBER "$TMP.bytes" > "$TMP.bytes2"
	    mv "$TMP.bytes2" "$TMP.bytes"
	    head -n $TO_READ "$TMP.gpx2" > "$TMP.points"
	    B_GPX=0
	    stat -c%s "$TMP.gpx2" > "$TMP.var"
	    read B_GPX < "$TMP.var"
	    B_PNT=0
	    stat -c%s "$TMP.points" > "$TMP.var"
	    read B_PNT < "$TMP.var"
	    ((TO_READ=$B_GPX-$B_PNT))
	    tail -c$TO_READ "$TMP.gpx2" > "$TMP.points"
	    mv "$TMP.points" "$TMP.gpx2"
	done
	# create attr table: cat(int), id number(int 0-19), name varchar(16+), starting_wpt(varchar 10)
	ATTR_FILE="${TMP}.route_atts"
	ATTR_COLS='cat int, route_id int, name varchar(40), start_wpt varchar(40)'
    fi

    if [ $TRK -eq 1 ] ; then

	# list of bytes where tracks finish
	cat "$TMP.gpx" | grep -n "</trkseg>" > "$TMP.bytes"
	# number of routes
	cat "$TMP.bytes" | grep -c "</trkseg>" > "$TMP.var"
	TRACK_NUMBER=0 
	read TRACK_NUMBER < "$TMP.var" # route number to process
	READ_BYTES=0 # offset of bytes already read
	cp "$TMP.gpx" "$TMP.gpx2" # file to be "eaten" by head commands in while 
	TRACK_ID=0 # track identifier
	while (($TRACK_NUMBER>0)); do
	    head -n 1 "$TMP.bytes" | cut -f 1 -d ':'> "$TMP.var"
	    END_BYTE=0
	    read END_BYTE < "$TMP.var" # this route ends at END_BYTE in $TMP.gpx file
	    TO_READ=0
	    ((TO_READ=$END_BYTE-$READ_BYTES)) # bytes to read from $TMP.gpx2 file 
	    ((READ_BYTES=$READ_BYTES+$TO_READ))# update readed bytes
	    # list of points in route
	    head -n $TO_READ "$TMP.gpx2" | grep "<trkpt" > "$TMP.points" 
	    POINTS=0 # number of points in track 
	    cat "$TMP.points" | grep -c "<trkpt" > "$TMP.var"
	    read POINTS < "$TMP.var"
	    echo "L $POINTS 1" >> "$TMP.base"
	    # read lat lon data
	    cat "$TMP.points" |cut -f2 -d'<'| cut -f2,3 -d ' ' | cut -f2,4 -d '"'|tr '"' '\t'> "$TMP.latlon"
	    cat "$TMP.latlon" |tr ',' '.'| awk '{printf(" %s %s\n", $2, $1) }'>> "$TMP.base"
	    # create attribute line
	    head -n $TO_READ "$TMP.gpx2"| grep -n "<trk" | head -n 1| cut -f1 -d ':'> "$TMP.var"
	    OFFSET=0
	    read OFFSET < "$TMP.var"
	    S_LAT=""
	    head -n 1 "$TMP.latlon" | cut -f1 > "$TMP.var"
	    read S_LAT < "$TMP.var"
	    S_LON=""
	    head -n 1 "$TMP.latlon" | cut -f2 > "$TMP.var"
	    read S_LON < "$TMP.var"
	    E_LAT=""
	    tail -n 1 "$TMP.latlon" | cut -f1 > "$TMP.var"
	    read E_LAT < "$TMP.var"
	    E_LON=""
	    tail -n 1 "$TMP.latlon" | cut -f2 > "$TMP.var"
	    read E_LON < "$TMP.var"
	    ((OFFSET=$TO_READ-$OFFSET))
	    head -n $TO_READ "$TMP.gpx2" | tail -n $OFFSET | grep "<time" > "$TMP.time"
	    S_TIME=""
	    head -n 1 "$TMP.time"| cut -f 2 -d'>'| cut -f1 -d'<'> "$TMP.var"
	    read S_TIME < "$TMP.var"
	    E_TIME=""
	    tail -n 1 "$TMP.time"| cut -f 2 -d'>'| cut -f1 -d'<'> "$TMP.var"
	    read E_TIME < "$TMP.var"
	    ((TRACK_ID++))
	    echo -e "$TRACK_ID \t$S_TIME \t$S_LAT \t$S_LON \t$E_TIME \t$E_LAT \t$E_LON">> "$TMP.track_atts"
	    ((TRACK_NUMBER--))
	    # eat files
	    tail -n $TRACK_NUMBER "$TMP.bytes" > "$TMP.bytes2"
	    mv "$TMP.bytes2" "$TMP.bytes"
	    head -n $TO_READ "$TMP.gpx2" > "$TMP.points"
	    B_GPX=0
	    stat -c%s "$TMP.gpx2" > "$TMP.var"
	    read B_GPX < "$TMP.var"
	    B_PNT=0
	    stat -c%s "$TMP.points" > "$TMP.var"
	    read B_PNT < "$TMP.var"
	    ((TO_READ=$B_GPX-$B_PNT))
	    tail -c$TO_READ "$TMP.gpx2" > "$TMP.points"
	    mv "$TMP.points" "$TMP.gpx2"
	done

	# create attr table: cat(int), start_time varchar(40), start_lat(double precision), start_lon(double precision), \
	#			end_time varchar(40), end_lat(double precision), end_lon(double precision)
	
	ATTR_FILE="${TMP}.track_atts"
	ATTR_COLS='cat int, start_time varchar(40), start_lat double precision, start_lon double precision, end_time varchar(40), end_lat double precision, end_lon double precision'
    fi


    #### reproject if needed
    if [ "$IN_PROJ" = "$OUT_PROJ" ] || [ $KEEP_WGS84 -eq 1 ] ; then
	echo "No projection transformation performed" 1>&2
	cat "${TMP}.base" | awk 'BEGIN {;} $1=="L" { print } ; \
	    $1!="L" { " %s %s\n", $1, $2) } END {;}' > "${TMP}.P_base"
    else
	echo "Attempting waypoint projection transform with cs2cs" 1>&2
	cs2cs -tL -f %.7f $IN_PROJ +to $OUT_PROJ < "${TMP}.base" > "${TMP}.P_mid"
	EXITCODE=$?
	 # check if transform REALLY worked (e.g. grid file not found)
	if [ -n "`head -n 2 "${TMP}.P_mid" | grep "^*"`" ] ; then
	    EXITCODE=1
	fi
	if [ $EXITCODE -ne 0 ] ; then
	    echo "Projection transform failed, retaining WGS84" 1>&2
	    cat "${TMP}.base" | awk 'BEGIN {;} $1=="L" { print } ; \
		$1!="L" { printf(" %s %s\n", $1, $2) } END {;}' > "${TMP}.P_base"
	else
	    cat "${TMP}.P_mid" | awk 'BEGIN {;} $1=="L" { print } ; \
		$1!="L" { printf(" %s %s\n", $1, $2) } END {;}' > "${TMP}.P_base"
	fi
    fi

    # add category numbers
    cat "${TMP}.P_base" | awk 'BEGIN { FS=" " ; R=0 } \
	$1=="L" { printf(" 1 %d\nL %d 1\n", R, $2) ; ++R } ; \
	$1!="L" { print } END { printf(" 1 %d\n", R) }' | sed -e '1d' > "${TMP}.P_baseC"


    #### create digit header
    cat << EOF > "${TMP}.dig"
ORGANIZATION: GRASSroots organization
DIGIT DATE:   `date +%D`
DIGIT NAME:   $PROG
MAP NAME:     $NAME
MAP DATE:     `date +%Y`
MAP SCALE:    1
OTHER INFO:   Imported by `echo $USER@$HOSTNAME`
ZONE:	 0
MAP THRESH:   0
VERTI:
EOF

    #### merge in vertices
#HB#?? locale test fixed this   
    cat "${TMP}.P_baseC" | tr ',' '.' >> "${TMP}.dig"

    #### if no name for vector file given, cat to stdout
    if [ -z "$NAME" ] ; then
	echo "ASCII file redirected to stdout" 1>&2
	cat "${TMP}.dig" 2> /dev/null
    else
	#### import to binary vector file 
	echo "Importing with v.in.ascii" 1>&2
	v.in.ascii format=standard output="$NAME" input="${TMP}.dig"

	#### check success/failure
	if [ $? -eq 0 ] ; then
	    echo "$PROG: line vector \"$NAME@$MAPSET\" successfully created" 1>&2
	else
	    echo "$PROG: An error occured on creating \"$NAME\" in mapset \"$MAPSET\"," 1>&2
	    echo "please check!" 1>&2
	    exit 1
	fi

	## create db links if they don't exist  (Markus made it automatic now?)
	DRIVER="`db.connect -p | grep '^driver:' | cut -f2 -d:`"
	DATABASE="`db.connect -p | grep '^database:' | cut -f2 -d:`"
	if [ "$DRIVER" = "(null)" ] || [ "$DATABASE" = "(null)" ] ; then
	    echo "Setting default database driver to DBF."
	    db.connect driver=dbf database='$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/'
	fi
	DRIVER="`db.connect -p | grep '^driver:' | cut -f2 -d:`"
	if [ "$DRIVER" = "dbf" ] && [ ! -d "$LOCATION/dbf/" ] ; then
	    mkdir "$LOCATION/dbf/"
	fi

	echo "Creating new table.."
	echo "CREATE TABLE $NAME ($ATTR_COLS)" | db.execute

	echo "Populating table with attributes.."
	# echo "COPY $NAME FROM '$ATTR_FILE'" | db.execute

	# "COPY table FROM 'filename.txt'" does not work for DBF and there is no
	#   db.in.ascii yet, so we use a hack ...

### <hack>
	if [ $RTE -eq 1 ] ; then
	    # =>  echo "INSERT INTO $NAME VALUES (2, 1, 'AB', 'B')" | db.execute
	    cat "$ATTR_FILE" | \
	      awk -F'\t' '{ printf("echo \"INSERT INTO $NAME VALUES (%d, %d, ^%s^, ^%s^)\" | db.execute\n", $1, $2, $3, $4) }' \
		| tr '^' \' >  "$ATTR_FILE"_exe
	fi
	if [ $TRK -eq 1 ] ; then
	    # =>  echo "INSERT INTO $NAME VALUES ()" | db.execute
	    cat "$ATTR_FILE" | \
	      awk -F'\t' '{ printf("echo \"INSERT INTO $NAME VALUES (%d, ^%s^, %s, %s, ^%s^, %s, %s)\" | db.execute\n", $1, $2, $3, $4, $5, $6, $7) }' \
		| tr '^' \' >  "$ATTR_FILE"_exe
	fi

	. "$ATTR_FILE"_exe
### </hack>

	echo "Connecting attribute table to vector file.."
	v.db.connect map="$NAME" table="$NAME"
    fi

fi  # if CREATE_POINTS or CREATE_LINES


# list column names
if [ $VERBOSE -eq 1 ] && [ -n "$NAME" ] ; then
    echo
    echo "<$NAME> columns:"
    db.columns "$NAME"
fi


#### clean up the mess
rm -f ${TMP}.* 1>&2 > /dev/null

#### end
echo 1>&2
echo "Done." 1>&2

exit 0
