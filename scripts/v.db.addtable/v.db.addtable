#!/bin/sh
#
############################################################################
#
# MODULE:       v.db.addtable
# AUTHOR(S):   	Markus Neteler 
# PURPOSE:      interface to db.execute to creates and add a new table to given vector map
# COPYRIGHT:    (C) 2005 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# TODO: add error checking if table already exists
#############################################################################


#%Module
#%  description: creates and adds a new attribute table to a given layer of an existing vector map
#%End

#%option
#% key: map
#% type: string
#% gisprompt: old,vector,vector
#% description: vector map for which to add new attribute table
#% required : yes
#%end

#%option
#% key: table
#% type: string
#% description: name of new attribute table (default: vector map name)
#% required : no
#%end

#%option
#% key: layer
#% type: integer
#% description: Layer where to add new attribute table
#% answer: 1
#% required : no
#%end

#%option
#% key: columns
#% type: string
#% description: name and type of the new column(s) (types depend on database backend, but all support VARCHAR, INT, DOUBLE and DATE)
#% required : yes
#%end


if  [ -z $GISBASE ] ; then
    echo "You must be in GRASS GIS to run this program."
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

#### check if we have awk
AWK=`which awk`
if [ "$AWK" = "" ] ; then
    echo "$PROG: awk required, please install awk/gawk first" 2>&1
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
export LC_NUMERIC=C

if [ -z "$GIS_OPT_table" ] ; then
    echo "Using vector map name extended by layer number as table name: ${GIS_OPT_map}_$GIS_OPT_layer"
    table=${GIS_OPT_map}_$GIS_OPT_layer
else
    echo "Using user specified table name: $GIS_OPT_table"
    table=$GIS_OPT_table
fi

# we use the DB settings of layer 1 to find out default connection
QUERYLAYER=1
database=`v.db.connect $GIS_OPT_map -g`
if [ $? -ne 0 ] ; then
   echo "Creating new DB connection based on default mapset settings..."
   database=`db.connect -p | grep database | cut -d':' -f2`
   if [ $? -ne 0 ] ; then
       echo "An error occured. Stop."
       exit 1
   fi
   driver=`db.connect -p | grep driver | cut -d':' -f2`
else
 database=`v.db.connect $GIS_OPT_map -g | grep -w $QUERYLAYER | awk '{print $4}'`
 driver=`v.db.connect $GIS_OPT_map -g | grep -w $QUERYLAYER | awk '{print $5}'`
fi

#maybe there is already a table linked to the selected layer?
if [ $GIS_OPT_layer -eq 1 ] ; then
  v.db.connect $GIS_OPT_map -g | grep -w $GIS_OPT_layer 2>&1 > /dev/null
  if [ $? -eq 0 ] ; then
     echo "ERROR: there is already a table linked to layer <$GIS_OPT_layer>"
     exit 1
  fi
fi

echo "CREATE TABLE $table (cat integer, $GIS_OPT_columns)" | db.execute database=$database driver=$driver
if [ $? -ne 0 ] ; then
 # take care if no DB was ever defined (e.g., in a new mapset)
 # probably the DBF directory is missing (heck, the DBF driver should take care!)
 echo "CREATE TABLE $table (cat integer, $GIS_OPT_columns)" | db.execute database=$database driver=$driver | grep 'Cannot open dbf database'
 if [ $? -ne 0 ] ; then
   GISDBASE=`g.gisenv GISDBASE`
   LOCATION_NAME=`g.gisenv LOCATION_NAME`
   MAPSET=`g.gisenv MAPSET`
   echo "Creating missing DBF directory in MAPSET <${MAPSET}>"
   mkdir -p ${GISDBASE}/${LOCATION_NAME}/${MAPSET}/dbf
   db.connect driver=dbf database='$GISDBASE/$LOCATION_NAME/$MAPSET/dbf/'
   echo "CREATE TABLE $table (cat integer, $GIS_OPT_columns)" | db.execute
   if [ $? -ne 0 ] ; then
     echo "An error occured. Stop."
     exit 1
   fi
 fi
fi

# connect the map to the DB:
v.db.connect map=$GIS_OPT_map database=$database driver=$driver layer=$GIS_OPT_layer table=$table key=cat

# finally we have to add cats into the attribute DB to make modules such as v.what.rast happy:
# (creates new row for each vector line):
v.to.db $GIS_OPT_map layer=$GIS_OPT_layer option=cat col=cat

echo ""
echo "Current attribute table links:"
v.db.connect -p $GIS_OPT_map

exit 0

