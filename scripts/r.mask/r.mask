#!/bin/sh
#
############################################################################
#
# MODULE:       r.mask
# AUTHOR(S):	Michael Barton, Arizona State University
#               Markus Neteler
# PURPOSE:	    Facilitates creation of raster MASK using r.reclass
# COPYRIGHT:	(C) 2005, 2007 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################


#%Module
#%  description: Create a MASK for limiting raster operation
#%  keywords: raster, mask
#%End
#%option
#% key: input
#% type: string
#% gisprompt: old,cell,raster
#% description: Raster map to use as MASK
#% required : no
#%END
#%option
#% key: maskcats
#% type: string
#% description: Category values to use for MASK (format: 1 2 3 thru 7 *)
#% answer: *
#%END
#%flag
#% key: i
#% description: Create inverse MASK from specified 'maskcats' list
#%END
#%flag
#% key: o
#% description: Overwrite existing MASK
#%END
#%flag
#% key: r
#% description: Remove existing MASK (overrides other options)
#%END


if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

# temp file
TEMPRAST="r_mask_$$"

cleanup()
{
 g.remove --q rast=$TEMPRAST
}

# what to do in case of user break:
exitprocedure()
{
 g.message -e 'User break!'
 cleanup
 exit 1
}

# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

# if map is given check if existing
if [ $GIS_OPT_INPUT ]; then
   eval `g.findfile element=cell file=$GIS_OPT_INPUT`
   filename="${fullname}"
   if [ "$filename" = "" ] ; then
      g.message -e "Raster map <$GIS_OPT_INPUT> not found"
      exit 1
   fi
fi


if [ "$GIS_FLAG_R" -eq 1 ]; then
	if test -f `g.gisenv GISDBASE`/`g.gisenv LOCATION_NAME`/`g.gisenv MAPSET`/cell/MASK ; then
 		g.remove rast=MASK
 		g.message "Raster MASK removed"
 	else
 		g.message -w "No existing MASK to remove"
	fi
else
	if [ ! $GIS_OPT_INPUT ]; then
		g.message -w "No raster map for MASK provided"
		exit 1;
	fi
	if [ "$GIS_FLAG_O" -eq 1 ]; then
		echo "$GIS_OPT_MASKCATS = 1" | r.reclass input=$GIS_OPT_INPUT output=MASK --o
	else 
		# does map exist in CURRENT mapset?
		eval `g.findfile element=cell file=MASK mapset=$MAPSET`
		if [ "$file" ] ; then
		   g.message -e "MASK already found in current mapset. Delete first or overwrite"
		   exit 1
		fi

		echo "$GIS_OPT_MASKCATS = 1" | r.reclass input=$GIS_OPT_INPUT output=MASK
	fi

        if [ "$GIS_FLAG_I" -eq 1 ]; then
		g.rename --q rast=MASK,$TEMPRAST
		r.mapcalc "MASK=if(isnull($TEMPRAST),1,null())"
		g.remove --q rast=$TEMPRAST
		g.message "Inverted MASK created. All subsequent raster operations"
	else
	  g.message "MASK created. All subsequent raster operations"
	fi
        g.message "will be limited to MASK area"
        g.message "Removing or renaming raster file named MASK will"
        g.message "restore raster operations to normal"
fi

exit 0
