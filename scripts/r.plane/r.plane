#!/bin/sh
#
############################################################################
#
# MODULE:	r.plane for GRASS 5.7; based on r.plane for GRASS 5
# AUTHOR(S):	CERL?; updated to GRASS 5.7 by Michael Barton
# PURPOSE:	Creates a raster plane map from user specified inclination and azimuth
# COPYRIGHT:	(C) 2004 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################


#%Module
#%  description: r.plane - Creates raster plane map given dip (inclination), aspect (azimuth), and one point
#%End
#%option
#% key: dip
#% type: integer
#% gisprompt: -90-90
#% answer: 0
#% description: Dip of plane. Value must be between -90 and 90 degrees.
#% required : yes
#%end
#%option
#% key: az
#% type: integer
#% gisprompt: 0-360
#% answer: 0
#% description: Aspect of plane. Value must be between 0 and 360 degrees.
#% required : yes
#%end
#%option
#% key: ea
#% type: double
#% description: Easting coordinate of a point on the plane.
#% required : yes
#%end
#%option
#% key: no
#% type: double
#% description: Northing coordinate of a point on the plane.
#% required : yes
#%end
#%option
#% key: el
#% type: double
#% description: Elevation coordinate of a point on the plane.
#% required : yes
#%end
#%option
#% key: name
#% type: string
#% gisprompt: old,cell,raster
#% description: Name of raster plane to be created.
#% required : yes
#%end



if  [ -z $GISBASE ] ; then
 echo "You must be in GRASS GIS to run this program."
 exit 1
fi   

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi
     
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET


dip=$GIS_OPT_dip 
az=$GIS_OPT_az
ea=$GIS_OPT_ea
no=$GIS_OPT_no
el=$GIS_OPT_el
name=$GIS_OPT_name


eval `g.region -g`


# get directory for r.in.ascii
CELLDIR=$LOCATION/cell

diptest=`echo $dip | awk '{ printf("%8d", int($1 + 0.5))'}`

if [ $diptest -lt -90 -o $diptest -gt 90 ]
then
	echo Sorry, dip must be greater than -90 and less than 90.
	echo Please enter a valid value.
	exit 1
fi

if  [ $az -le 0 -o $az -ge 360 ]
then
	echo Sorry, azimuth must be greater than -1  and less than 360
	exit 1
fi

echo $ea > /tmp/$$
awk '{ printf "eaint=%d",$1 }' /tmp/$$ > /tmp/$$ea
	eval `cat /tmp/$$ea`
rm /tmp/$$*
if test $eaint -le $e -a $eaint -ge $w
then
	gotit=1
	echo $ea
else
	echo "Sorry, point must be within current region"
	echo "Current region:"
	echo "west: "$w   "east: "$e
	exit 1
fi


echo $no > /tmp/$$
awk '{ printf "noint=%d",$1 }' /tmp/$$ > /tmp/$$no
	eval `cat /tmp/$$no`
rm /tmp/$$*
if test $noint -gt $s -a $noint -lt $n
then
	gotit=1
	echo $no
else
	echo "Sorry, point must be within current region"
	echo "Current region:"
	echo "south: "$s   "north: "$n
	exit 1
fi


#g.ask type=new element=cell desc=raster prompt="Enter name for resulting file:" unixfile=/tmp/$$ 
#eval `cat /tmp/$$`
#rm -f /tmp/$$

# now the actual algorithm in awk (stored in a temporary file)
cat > /tmp/$$ << EOF

{
if (NR==1) {
# print file header
  rows = (north-south) / nsres
  cols = (east-west) / ewres
    printf("east:     %d\n",east)
    printf("west:     %d\n",west)
    printf("south:    %d\n",south)
    printf("north:    %d\n",north)
    printf("cols:     %d\n",cols)
    printf("rows:     %d\n",rows)
    cells=rows*cols
    z=1
    }

if (NR==2) {
    pi=3.14159265359
    a2=(az*pi)/180
    dip2=(dip*pi)/180 
    tandip=(sin(dip2)/cos(dip2))
    northc=north-(0.5*nsres)
    southc=south+(0.5*nsres)
    eastc=east-(0.5*ewres)
    westc=west+(0.5*ewres)
   
    for (y=northc; y >= southc; y=y-nsres) {
       for (x=westc; x <= eastc; x=x+ewres) {
	 dx=(ea-x)
	 dy=(y-no)
 	 dist = sqrt((dx*dx) + (dy*dy))
	 if (dist==0) {
	   new_elev[z]=el
	   }
	 else {
	   gamma = atan2((dx/dist),(dy/dist))
	   epsilon=a2-gamma
	   d=dist*cos(epsilon)
	   h=(d*sin(dip2)/cos(dip2))	
	   new_elev[z]=el-h
	   z++
	   }
         }
     }
}
if (NR>=2) {
}
}
END {  
      for (z=1; z <= cells; z++) {
 	printf" %d",new_elev[z]
 	}
  
}

EOF

#execute awk and remove temporary file

awk  -f /tmp/$$ -v east=$e west=$w north=$n south=$s ea=$ea no=$no \
  nsres=$nsres ewres=$ewres  dip=$dip az=$az el=$el /tmp/$$ > $name

rm /tmp/$$

echo "Running r.in.ascii, please stand by"
r.in.ascii i=$name o=$name
rm $name

dat=`date +'%a %b %e %T %Y'`
user=`logname`
cat > $LOCATION/hist/$name << EOF2
$dat
$MAPSET
$name
$user
cell
EOF2

echo ""
echo ""
echo "DONE"
echo ""
echo "$name@$MAPSET generated by r.plane"
echo "at point $ea E, $no N, elevation $el"
echo "with dip=$dip degrees and aspect=$az degrees ccw from north"
echo "$dat, user: $user"


