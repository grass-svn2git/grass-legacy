#!/bin/sh
#
############################################################################
#
# MODULE:       v.db.renamecol
# AUTHOR(S):   	Markus Neteler
# PURPOSE:      interface to db.execute to drop a column from the 
#               attribute table connected to a given vector map
#               - Based on v.db.dropcol
#               - with special trick for SQLite and DBF (here the new col is 
#                 added/values copied/old col deleted)
# COPYRIGHT:    (C) 2007 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
# TODO: MySQL untested
#############################################################################


#%Module
#%  description: Renames a column in a attribute table connected to a given vector map.
#%  keywords: vector, database, attribute table
#%End
#%option
#% key: map
#% type: string
#% gisprompt: old,vector,vector
#% key_desc : name
#% description: Vector map for which to rename attribute column
#% required : yes
#%end
#%option
#% key: layer
#% type: integer
#% description: Layer where to rename column
#% answer: 1
#% required : no
#%end
#%option
#% key: column
#% type: string
#% description: Old and new name of the column (old,new)
#% required : yes
#% multiple: yes
#%end

if [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program." >&2
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE="`basename $0`"
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
    exec g.parser "$0" "$@"
fi

PROG=`basename $0`

#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "awk required, please install awk or gawk first"
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

#### setup temporary file
TMP="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TMP" ] ; then
    g.message -e "Unable to create temporary files" 
    exit 1
fi

cleanup()
{
 \rm -f $TMP $TMP.coltypes $TMP.colnames $TMP.coldesc
}

# what to do in case of user break:
exitprocedure()
{
 g.message -e 'User break!'
 cleanup
 exit 1
}
# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15

error()
{
  g.message -e "Cannot continue (problem renaming column)."
  cleanup
  exit 1
}

### setup enviro vars ###
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
# does map exist in CURRENT mapset?
eval `g.findfile element=vector file=$GIS_OPT_MAP mapset=$MAPSET`
if [ ! "$file" ] ; then
   g.message -e  "Vector map '$GIS_OPT_MAP' not found in current mapset"
   exit 1
fi

table=`v.db.connect $GIS_OPT_MAP -g | grep -w $GIS_OPT_LAYER | awk '{print $2}'`
if [ -z "$table" ] ; then
   g.message 'There is no table connected to this map! Cannot rename any column.'
   cleanup
   exit 1
fi
database=`v.db.connect $GIS_OPT_MAP -g | grep -w $GIS_OPT_LAYER | awk '{print $4}'`
driver=`v.db.connect $GIS_OPT_MAP -g | grep -w $GIS_OPT_LAYER | awk '{print $5}'`
oldcol="`echo $GIS_OPT_COLUMN | cut -d',' -f1`"
newcol="`echo $GIS_OPT_COLUMN | cut -d',' -f2`"

if [ "$driver" = "dbf" ] ; then
  NAMELEN=`echo "$newcol" | wc -c | awk '{print $1}'`
  #max DBF column name length is 10, but wc counts echo's \n char so we test for 11.
  #  'echo -n' (output as string, ie with no newline) is apparently not portable.
  if [ "$NAMELEN" -gt 11 ] ; then
   g.message -e "Column name too long <$newcol>: the DBF driver only supports up to 10 characters as column name."
   cleanup
   exit 1
  fi
fi

if [ "$col" = "cat" ] ; then
   g.message -e "Cannot rename <$col> column as it is needed to keep table \
     connected to vector map"
   cleanup
   exit 1
fi

# old col there?
v.info --q -c $GIS_OPT_MAP layer=$GIS_OPT_LAYER | cut -d'|' -f1,2 | grep "|${oldcol}$" 2>&1 >/dev/null
if [ $? -ne 0 ] ; then
	g.message -e "Column <$oldcol> not found in table"
	cleanup
	exit 1
fi

# describe old col
oldcoltype="`db.describe -c table=$table database=$database driver=$driver | grep $oldcol | cut -d':' -f3`"
oldcollength=`db.describe -c table=$table database=$database driver=$driver | grep $oldcol | cut -d':' -f4`

# some tricks
if [ "$driver" = "sqlite" -o "$driver" = "dbf" ] ; then

	if [ "$oldcoltype" = "CHARACTER" ] ; then
	    v.db.addcol $GIS_OPT_MAP layer=$GIS_OPT_LAYER col="$newcol varchar($oldcollength)" || error
	else
	    v.db.addcol $GIS_OPT_MAP layer=$GIS_OPT_LAYER col="$newcol $oldcoltype" || error
	fi
	echo "UPDATE $table SET $newcol=$oldcol" | db.execute database=$database driver=$driver
	v.db.dropcol $GIS_OPT_MAP layer=$GIS_OPT_LAYER col=$oldcol
else
	echo "ALTER TABLE $table RENAME $oldcol TO $newcol" | db.execute database=$database driver=$driver || error
fi

# cleanup
cleanup

# write cmd history:
v.support ${GIS_OPT_MAP} cmdhist="${CMDLINE}"

exit 0

