#!/bin/sh
#
############################################################################
#
# MODULE:	v.report
# AUTHOR(S):	Markus Neteler
# PURPOSE:	Reports geometry statistics for vector maps
# COPYRIGHT:	(C) 2005 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################

#%Module
#%  description: Reports geometry statistics for vectors
#%  keywords: vector, report, statistics
#%End
#%Flag
#% key: r
#% description: Reverse sort the result
#%End
#%Flag
#% key: s
#% description: Sort the result
#%End
#%option
#% key: map
#% type: string
#% gisprompt: old,vector,vector
#% description: Input vector map
#% required: yes
#%end
#%option
#% key: layer
#% type: integer
#% answer: 1
#% description: Layer number
#% required: no
#%end
#%option
#% key: option
#% type: string
#% description: Value to calculate
#% options: area,length,coor
#% required: yes
#%end
#%option
#% key: units
#% type: string
#% description: mi(les),f(eet),me(ters),k(ilometers),a(cres),h(ectares)
#% options: mi,miles,f,feet,me,meters,k,kilometers,a,acres,h,hectares
#% required: no
#%end

if  [ -z $GISBASE ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi   

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

### setup enviro vars ###
eval `g.gisenv`
: ${GISBASE?} ${GISDBASE?} ${LOCATION_NAME?} ${MAPSET?}
LOCATION=$GISDBASE/$LOCATION_NAME/$MAPSET

### trap <ctrl>-<c> so that we can clean up tmp and exit
trap 'rm -f "$TMP1" "$TMP2" ; exit 1' 2 3 15

# setting environment, so that sort works properly in all languages
LC_ALL=C         # according to 'man sort'
export LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

if [ $GIS_FLAG_R -eq 1 -a $GIS_FLAG_S -eq 1 ] ; then
	g.message -e "Either -r or -s flag"
	exit 1
fi

### secure temporary files:
TMP1="`g.tempfile pid=$$`"
TMP2="`g.tempfile pid=$$`"

MAP=$GIS_OPT_MAP
OPTION=$GIS_OPT_OPTION
LAYER=$GIS_OPT_LAYER

# does map exist?
eval `g.findfile element=vector file=$GIS_OPT_MAP`
if [ ! "$file" ] ; then
   g.message -e "Vector map '$GIS_OPT_MAP' not found in mapset search path"
   exit 1
fi

#fetch column names
COLNAMES="`v.info -c map=$MAP layer=$LAYER | grep -v '^Displaying column type' | cut -d '|' -f2 | tr '\n' '|'`"

#special treatment for opt=coor parameter:
if [ "$GIS_OPT_OPTION" = "coor" ] ; then
  COLUMS="dummy1,dummy2"
  EXTRACOLNAMES="x|y"
else
  COLUMS="dummy1"
  EXTRACOLNAMES="$OPTION"
fi   

#check for optional units parameter:
if  [ ! -z $GIS_OPT_UNITS ] ; then
  UNITSPARAM="units=$GIS_OPT_UNITS"
fi   

## NOTE: we suppress -1 cat and 0 cat

#fetch the attributes sorted by cat:
v.db.select -c map=$MAP layer=$LAYER | sort -n -t'|' -k 1 | grep -v '^0' > "$TMP1"
if [ `wc -l "$TMP1" | awk '{print $1}'` -eq 0 ] ; then
   #fetch the areas/line lengths sorted by cat:
   v.to.db -p map=$MAP opt=$OPTION col=$COLUMS $UNITSPARAM \
	   layer=$LAYER 2> /dev/null | grep -v '^cat' | grep -v '^-1' | grep -v '^0'\
	   | sort -n -t'|' -k 1 > "$TMP2"
else
   #fetch the areas/line lengths sorted by cat:
   v.to.db -p map=$MAP opt=$OPTION col=$COLUMS $UNITSPARAM \
	   layer=$LAYER 2> /dev/null | grep -v '^cat' | grep -v '^-1' | grep -v '^0'\
	   | sort -n -t'|' -k 1 | cut -d'|' -f2 > "$TMP2"
fi

#make and print the table:
NUMCOLS=`echo "$COLNAMES$EXTRACOLNAMES" | tr -s '|' ' ' | wc -w | awk '{print $1}'`

echo "$COLNAMES$EXTRACOLNAMES"
if [ $GIS_FLAG_S -eq 1 ] ; then
	# sort
	paste -d'|' "$TMP1" "$TMP2" | sort -n -t'|' -k${NUMCOLS}
else
	if [ $GIS_FLAG_R -eq 1 ] ; then
	# reverse sort
	paste -d'|' "$TMP1" "$TMP2" | sort -n -r -t'|' -k${NUMCOLS}
        else
	   # no sort (order by cat)
	   paste -d'|' "$TMP1" "$TMP2"
        fi
fi


#cleanup:
rm -f "$TMP1"
rm -f "$TMP2"

exit 0
