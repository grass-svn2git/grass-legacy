#!/bin/sh
#
############################################################################
#
# MODULE:	r.regression line
# AUTHOR(S):	Dr. Agustin Lobo - alobo@ija.csic.es
#               Updated to GRASS 5.7 by Michael Barton
# PURPOSE:	Calculates linear regression from two raster maps: y = a + b*x
# COPYRIGHT:	(C) 2004 by the GRASS Development Team
#
#		This program is free software under the GNU General Public
#		License (>=v2). Read the file COPYING that comes with GRASS
#		for details.
#
#############################################################################


#%Module
#%  description: Calculates linear regression from two raster maps: y = a + b*x
#%  keywords: raster, statistics
#%End
#%flag
#%  key: g
#%  description: Print in shell script style
#%End
#%flag
#%  key: s
#%  description: Slower but accurate (applies to FP maps only)
#%End
#%option
#% key: map1
#% type: string
#% gisprompt: old,cell,raster
#% description: Map for x coefficient
#% required : yes
#%end
#%option
#% key: map2
#% type: string
#% gisprompt: old,cell,raster
#% description: Map for y coefficient
#% required : yes
#%end
#%option
#% key: output
#% type: string
#% gisprompt: new_file,file,output
#% description: ASCII file for storing regression coefficients (output to screen if file not specified).
#% required : no
#%end

if  [ -z "$GISBASE" ] ; then
 echo "You must be in GRASS GIS to run this program." >&2
 exit 1
fi   

if [ "$1" != "@ARGS_PARSED@" ] ; then
  exec g.parser "$0" "$@"
fi

PROG=`basename $0`

#### check if we have awk
if [ ! -x "`which awk`" ] ; then
    g.message -e "awk required, please install awk or gawk first" 
    exit 1
fi

# setting environment, so that awk works properly in all languages
unset LC_ALL
LC_NUMERIC=C
export LC_NUMERIC

ok=yes
eval `g.findfile element=cell file=$GIS_OPT_MAP1`
if [ -z "$name" ] ; then
      g.message -e "Raster map <$GIS_OPT_MAP1> not found"
      ok=no
fi
eval `g.findfile element=cell file=$GIS_OPT_MAP2`
if [ -z "$name" ] ; then
      g.message -e "Raster map <$GIS_OPT_MAP2> not found"
      ok=no
fi
if [ "$ok" = "no" ] ; then
 exit 1
fi

TEMPFILE="`g.tempfile pid=$$`"
if [ $? -ne 0 ] || [ -z "$TEMPFILE" ] ; then
    g.message -e "Unable to create temporary files"
    exit 1
fi


#calculate regression equation
if [ $GIS_FLAG_S -eq 1 ] ; then
   # slower but accurate
   r.stats -n1  input=$GIS_OPT_MAP1,$GIS_OPT_MAP2 | sed 's+$+ 1+g' > "$TEMPFILE"
else
   # count "identical" pixels
   r.stats -cnA input=$GIS_OPT_MAP1,$GIS_OPT_MAP2  > "$TEMPFILE"
fi

if [ ! -s "$TEMPFILE" ] ; then
    g.message -e "One or both input maps only contain no data (NULL) pixels in the current region"
    exit 1
fi

awk '{tot += $3;sumX +=$1 * $3; sumsqX +=$1*$1*$3;sumY +=$2 * $3; sumsqY +=$2*$2*$3;\
 sumXY +=$1*$2*$3;\
}\
END {B=(sumXY - sumX*sumY/tot)/(sumsqX - sumX*sumX/tot);\
R= (sumXY - sumX*sumY/tot)/((sumsqX - sumX^2/tot)*(sumsqY - sumY^2/tot))^0.5;\
mediaX=sumX/tot;sumsqX=sumsqX/tot;varX=sumsqX-(mediaX^2);sdX=varX^0.5;\
mediaY=sumY/tot;sumsqY=sumsqY/tot;varY=sumsqY-(mediaY^2);sdY=varY^0.5;\
A=mediaY - B*mediaX; F= R^2/(1-R^2/tot-2);\
print A, B, R, tot, F, mediaX, sdX, mediaY, sdY}' "$TEMPFILE" > "$TEMPFILE"b

echo "a b R N F medX sdX medY sdY" | tr -s ' ' '\n' > "$TEMPFILE"d
cat "$TEMPFILE"b | tr -s ' ' '\n' > "$TEMPFILE"e

#send output to screen or text file
if [ -z "$GIS_OPT_OUTPUT" ] 
then
	if [ $GIS_FLAG_G -eq 1 ] ; then
	   paste -d'=' "$TEMPFILE"d "$TEMPFILE"e
	else
	   echo "y = a + b*x"
           echo "   a: offset"
           echo "   b: gain"
           echo "   R: sumXY - sumX*sumY/tot"
           echo "   N: number of elements"
           echo "   medX, medY: Means"
           echo "   sdX, sdY: Standard deviations"
           echo "a  b  R  N  F medX  sdX  medY  sdY"
	   RESULTADO=`cat "$TEMPFILE"b`
           echo ${RESULTADO}
	fi
else
	if [ $GIS_FLAG_G -eq 1 ] ; then
	   paste -d'=' "$TEMPFILE"d "$TEMPFILE"e >> "$TEMPFILE"c
	else
	   echo "y = a + b*x" > "$TEMPFILE"c
           echo "   a: offset" >> "$TEMPFILE"c
           echo "   b: gain" >> "$TEMPFILE"c
           echo "   R: sumXY - sumX*sumY/tot" >> "$TEMPFILE"c
           echo "   N: number of elements" >> "$TEMPFILE"c
           echo "   medX, medY: Means" >> "$TEMPFILE"c
           echo "   sdX, sdY: Standard deviations" >> "$TEMPFILE"c
           echo "a  b  R  N  F medX  sdX  medY  sdY" >> "$TEMPFILE"c
	   cat "$TEMPFILE"b >> "$TEMPFILE"c
	fi
	mv "$TEMPFILE"c "$GIS_OPT_OUTPUT"
	cat "$GIS_OPT_OUTPUT"
fi
rm -f "$TEMPFILE" "$TEMPFILE"b "$TEMPFILE"c "$TEMPFILE"d "$TEMPFILE"e
