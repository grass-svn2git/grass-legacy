#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4.1 on Mon Feb 26 18:29:42 2007

import wx
import sys
import os
import glob

RC = {"GISDBASE":None,
      "LOCATION_NAME":None,
      "MAPSET" : None,
      }

def read_grassrc():
    """
    Read variables from $HOME/.grassrc6 file
    """
    global RC

    if os.path.isfile(os.path.join(os.getenv("HOME"),".grassrc6")):
        rc = open(os.path.join(os.getenv("HOME"),".grassrc6"),"r")
        for line in rc.readlines():
            key,val = line.split(":")
            RC[key.strip()] = val.strip()
        rc.close()

class EpsgCode(wx.Frame):
    def __init__(self, parent, id, title, ):
        wx.Frame.__init__(self,parent, id , title, size=(50,600))

        self.parent = parent

        # sizers
        self.vsizer= wx.BoxSizer(wx.VERTICAL)
        self.sizer = wx.GridSizer(5,3,0,0)

        # labels
        self.lname= wx.StaticText(self, -1, "Name of new Location: ",
                style=wx.ALIGN_RIGHT)
        self.lfile= wx.StaticText(self, -1, "Path to the EPSG-codes file: ",
                style=wx.ALIGN_RIGHT)
        self.lcode= wx.StaticText(self, -1, "EPSG code: ",
                style=wx.ALIGN_RIGHT)
        self.lsearch= wx.StaticText(self, -1, "Search in code description: ",
                style=wx.ALIGN_RIGHT)

        # text input
        self.tname = wx.TextCtrl(self,-1, "newLocation", size=(150,20))
        self.tfile = wx.TextCtrl(self,-1, "/usr/share/proj/epsg", size=(150,20))
        self.tcode = wx.TextCtrl(self,-1, "", size=(150,20))

        # buttons
        self.bbrowse = wx.Button(self, -1, "Browse ...")
        self.bbcodes = wx.Button(self, -1, "Browse Codes")
        self.bcancel = wx.Button(self, -1, "Cancel")
        self.bcreate = wx.Button(self, -1, "Create")

        # empty panels
        self.epanel1 = wx.Panel(self,-1) 
        self.epanel2 = wx.Panel(self,-1) 

        # search box
        self.searchb = wx.SearchCtrl(self, size=(200,-1), style=wx.TE_PROCESS_ENTER)

        # table
        self.tablewidth=600
        self.epsgs = wx.ListCtrl(self, -1, style=wx.LC_REPORT,
                size=(700,100))
        self.epsgs.InsertColumn(0, 'EPSG')
        self.epsgs.InsertColumn(1, '                        Description                     ')
        self.epsgs.InsertColumn(2, '                                            Parameters                                            ')
        self.epsgs.SetColumnWidth(0, 50)
        self.epsgs.SetColumnWidth(1, wx.LIST_AUTOSIZE_USEHEADER)
        self.epsgs.SetColumnWidth(2, wx.LIST_AUTOSIZE_USEHEADER)
        

        # laout
        label_style = wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_HORIZONTAL
        self.sizer.Add(self.lname, 0, wx.ALIGN_RIGHT, 1)
        self.sizer.Add(self.tname, 0, wx.ALIGN_LEFT, 1)
        self.sizer.Add(self.epanel1, 0, wx.ALIGN_LEFT, 1)

        self.sizer.Add(self.lfile, 0 , wx.ALIGN_RIGHT, 1)
        self.sizer.Add(self.tfile, 0 , wx.ALIGN_LEFT, 1)
        self.sizer.Add(self.bbrowse, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)

        self.sizer.Add(self.lcode, 0, wx.ALIGN_RIGHT,1)
        self.sizer.Add(self.tcode, 0, wx.ALIGN_LEFT,1)
        self.sizer.Add(self.epanel2, 0, wx.ALIGN_LEFT, 1)

        self.sizer.Add(self.lsearch, 0, wx.ALIGN_RIGHT,1)
        self.sizer.Add(self.searchb, 0, wx.ALIGN_LEFT,1)
        self.sizer.Add(self.epanel1, 0, wx.ALIGN_LEFT, 1)

        self.sizer.Add(self.bbcodes, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)
        self.sizer.Add(self.bcreate, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)
        self.sizer.Add(self.bcancel, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)

        self.vsizer.Add(self.sizer,0, wx.ADJUST_MINSIZE, 1)
        self.vsizer.Add(self.epsgs, wx.EXPAND,  1)

        self.SetAutoLayout(True)
        self.SetSizer(self.vsizer)
        self.vsizer.Fit(self)
        self.vsizer.SetSizeHints(self)
        self.Layout()

        
        # events
        wx.EVT_BUTTON(self, self.bbrowse.GetId(), self.OnBrowse)
        wx.EVT_BUTTON(self, self.bcancel.GetId(), self.OnCancel)
        wx.EVT_BUTTON(self, self.bcreate.GetId(), self.OnCreate)
        wx.EVT_BUTTON(self, self.bbcodes.GetId(), self.OnBrowseCodes)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.epsgs)
        self.searchb.Bind(wx.EVT_TEXT_ENTER, self.OnDoSearch, self.searchb)

    def OnDoSearch(self,event):
        str =  self.searchb.GetValue()
        listItem  = self.epsgs.GetColumn(1)

        for i in range(self.epsgs.GetItemCount()):
            listItem = self.epsgs.GetItem(i,1)
            if listItem.GetText().find(str) > -1:
                epsgcode = self.epsgs.GetItem(i, 0)
                self.tcode.SetValue(epsgcode.GetText())
                break

        self.OnBrowseCodes(None,str)
        

    def OnBrowse(self, event): 
        
        dlg = wx.FileDialog(self, "Choose a georeferenced file:",
        "/", "", "*.*", wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
                    path = dlg.GetPath()
                    self.tfile.SetValue(path)
        dlg.Destroy()

    def OnCancel(self, event):
        self.Destroy()

    def OnItemSelected(self,event):
        item = event.GetItem()
        self.tcode.SetValue(str(item.GetText()))

    
    def OnBrowseCodes(self,event,search=None):
        try:
            self.epsgs.DeleteAllItems()
            f = open(self.tfile.GetValue(),"r")
            i=1
            j = 0
            descr = None
            code = None
            params = ""
            #self.epsgs.ClearAll()
            for line in f.readlines():
                line = line.strip()
                if line.find("#") == 0:
                    descr= line[1:].strip()
                elif line.find("<") == 0:
                    code = line.split(" ")[0]
                    for par in line.split(" ")[1:]:
                        params += par + " "
                    code = code[1:-1]
                if i%2 == 0:
                    if search and descr.find(search) > -1 or\
                        not search:
                        self.epsgs.InsertStringItem(j,str(code))
                        self.epsgs.SetStringItem(j, 1, str(descr))
                        self.epsgs.SetStringItem(j, 2, str(params))
                        j  += 1
                    # reset 
                    descr = None; code = None; params = ""
                if i%2 == 0:
                    self.epsgs.SetItemBackgroundColour(i, "grey")
                i += 1
            f.close()
            self.SendSizeEvent()
        except StandardError, e:
            dlg = wx.MessageDialog(self, "Could not read EPGS codes: %s "
                    % e,"Can not read file",  wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()

    def OnChange(self,event):
            self.item =  event.GetItem()

    def OnCreate(self, event):
        if os.path.isfile(self.tfile.GetValue()):
            print self.item.GetItemText()
            print "file found, creation not supported"
        else:
            dlg = wx.MessageDialog(self, "Could not create new location: %s not file"
                    % self.tfile.GetValue(),"Can not create location",  wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
 
    def OnDoubleClick(self, event):
        print self.epsgs.GetValue()
        pass


class GeoreferencedFile(wx.Frame):
    def __init__(self, parent, id, title, ):
        wx.Frame.__init__(self,parent, id , title)

        self.parent = parent

        self.sizer = wx.GridSizer(3,3,0,0)

        self.lname= wx.StaticText(self, -1, "Name of new Location: ",
                style=wx.ALIGN_RIGHT)

        self.lfile= wx.StaticText(self, -1, "Georeferenced file: ",
                style=wx.ALIGN_RIGHT)

        self.tname = wx.TextCtrl(self,-1, "newLocation", size=(150,20))
        self.tfile = wx.TextCtrl(self,-1, "", size=(150,20))

        self.bbrowse = wx.Button(self, -1, "Browse ...")
        self.bcancel = wx.Button(self, -1, "Cancel")
        self.bcreate = wx.Button(self, -1, "Create")

        self.epanel = wx.Panel(self,-1)

        label_style = wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_HORIZONTAL
        self.sizer.Add(self.lname, 0, wx.ALIGN_RIGHT, 1)
        self.sizer.Add(self.tname, 0, wx.ALIGN_LEFT, 1)
        self.sizer.Add(self.epanel, 0, wx.ALIGN_LEFT, 1)

        self.sizer.Add(self.lfile, 0 , wx.ALIGN_RIGHT, 1)
        self.sizer.Add(self.tfile, 0 , wx.ALIGN_LEFT, 1)
        self.sizer.Add(self.bbrowse, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)

        self.sizer.Add(self.bcreate, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)
        self.sizer.Add(self.epanel, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)

        self.sizer.Add(self.bcancel, 0 , wx.ALIGN_CENTER_HORIZONTAL, 1)

        self.SetAutoLayout(True)
        self.SetSizer(self.sizer)
        self.sizer.Fit(self)
        self.sizer.SetSizeHints(self)
        self.Layout()

        
        wx.EVT_BUTTON(self, self.bbrowse.GetId(), self.OnBrowse)
        wx.EVT_BUTTON(self, self.bcancel.GetId(), self.OnCancel)
        wx.EVT_BUTTON(self, self.bcreate.GetId(), self.OnCreate)

    def OnBrowse(self, event): 
        
        dlg = wx.FileDialog(self, "Choose a georeferenced file:", os.getcwd(), "", "*.*", wx.OPEN)
        if dlg.ShowModal() == wx.ID_OK:
                    path = dlg.GetPath()
                    self.tfile.SetValue(path)
        dlg.Destroy()

    def OnCancel(self, event):
        self.Destroy()

    def OnCreate(self, event):
        if os.path.isfile(self.tfile.GetValue()):
            print "file found, creation not supported"
        else:
            dlg = wx.MessageDialog(self, "Could not create new location: %s not file"
                    % self.tfile.GetValue(),"Can not create location",  wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()
 
        


 
class GRASSStartup(wx.Frame):
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        #
        # variables
        #
        self.gisbase=sys.argv[1]
        self.listOfLocations = []
        self.listOfMapsets = []

        #
        # graphical elements
        #
        try:
            self.hbitmap = wx.StaticBitmap(self, -1, 
                    wx.Bitmap(os.path.join(self.gisbase,"etc","gintro.gif"), wx.BITMAP_TYPE_ANY))
        except:
            self.hbitmap = wx.StaticBitmap(self,  -1, wx.EmptyBitmap(530,150)) 

        # labels
        self.lwelcome = wx.StaticText(self, -1, 
                "Welcome to GRASS GIS Version 6.3.cvs\n"+\
                "The world's leading open source GIS\n\n"+\
                "Select an existing project location and mapset\n"+\
                "or define a new location", style=wx.ALIGN_CENTRE)
        self.ldbase = wx.StaticText(self, -1, "GIS Data Directory:")
        self.llocation = wx.StaticText(self, -1, "Project Location\n(projection/coordinate system)", style=wx.ALIGN_CENTRE)
        self.lmapset = wx.StaticText(self, -1, "Accessible Mapsets\n(directories of GIS files)", style=wx.ALIGN_CENTRE)
        self.lcreate = wx.StaticText(self, -1, "Create new mapset\nin selected location", style=wx.ALIGN_CENTRE)
        self.ldefine = wx.StaticText(self, -1, "Define new location with ...", style=wx.ALIGN_CENTRE)

        # buttons
        buttonsize = (150,25)
        self.bstart = wx.Button(self, -1, "Start GRASS", style=wx.RAISED_BORDER, size=buttonsize)
        self.bexit = wx.Button(self, -1, "Exit", size=buttonsize)
        self.bhelp = wx.Button(self, -1, "Help", size=buttonsize)
        self.bbrowse = wx.Button(self, -1, "Browse ...", size=buttonsize)
        self.bmapset = wx.Button(self, -1, "Create new mapset", size=buttonsize)
        self.bgeoreferenced = wx.Button(self, -1, "Georeferenced file", size=buttonsize)
        self.bepsg = wx.Button(self, -1, "EPSG codes", size=buttonsize)
        self.bwizard = wx.Button(self, -1, "Run Wizard", size=buttonsize)

        # textinputs
        self.tgisdbase = wx.TextCtrl(self, -1, "", size=(300, 20),
                style=wx.TE_LEFT)
        self.tnewmapset = wx.TextCtrl(self,-1, "", size=(150,20))
        
        # Locations
        self.lpanel = wx.Panel(self,-1)
        self.lblocations = wx.ListBox(self.lpanel, 
                26, wx.DefaultPosition, (150, 200), self.listOfLocations, wx.LB_SINGLE)

        # Mapsets
        self.mpanel = wx.Panel(self,-1)
        self.lbmapsets = wx.ListBox(self.mpanel, 
                26, wx.DefaultPosition, (150, 200), self.listOfMapsets, wx.LB_SINGLE)


        # layout & properties
        self.__set_properties()
        self.__do_layout()

        # events
        wx.EVT_BUTTON(self, self.bbrowse.GetId(), self.OnBrowse)
        wx.EVT_BUTTON(self, self.bstart.GetId(), self.OnStart)
        wx.EVT_BUTTON(self, self.bexit.GetId(), self.OnExit)
        wx.EVT_BUTTON(self, self.bhelp.GetId(), self.OnHelp)
        wx.EVT_BUTTON(self, self.bmapset.GetId(), self.OnCreateMapset)
        wx.EVT_BUTTON(self, self.bgeoreferenced.GetId(), self.OnGeoreferenced)
        wx.EVT_BUTTON(self, self.bepsg.GetId(), self.OnEpsg)
        wx.EVT_BUTTON(self, self.bwizard.GetId(), self.OnWizard)
        self.lblocations.Bind(wx.EVT_LISTBOX, self.OnSelectLocation)
        self.lbmapsets.Bind(wx.EVT_LISTBOX, self.OnSelectMapset)
        wx.EVT_KEY_DOWN(self.tgisdbase, self.OnKeyPressedInDbase)
        wx.EVT_KEY_DOWN(self.tnewmapset, self.OnKeyPressedInMapset)

    def __set_properties(self):
        self.SetTitle("Welcome to GRASS GIS")
        self.SetIcon(wx.Icon(os.path.join(self.gisbase,"etc","dm","grass.gif"),
            wx.BITMAP_TYPE_GIF))
        self.lwelcome.SetForegroundColour(wx.Colour(35, 142, 35))
        self.lwelcome.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.bstart.SetForegroundColour(wx.Colour(35, 142, 35))
        self.bstart.SetToolTipString("Enter GRASS session")
        self.bstart.Enable(False)
        self.bmapset.Enable(False)

        # set database
        gisbase = self.GetRCValue("GISDBASE")
        if not gisbase: gisbase = os.getenv("HOME")
        self.tgisdbase.SetValue(gisbase)

        # list of locations
        self.UpdateLocations(self.tgisdbase.GetValue())
        self.OnSetDatabase(None)
        location = self.GetRCValue("LOCATION_NAME")
        if location: 
            self.lblocations.SetSelection(self.listOfLocations.index(location))

            # list of mapsets
            self.UpdateMapsets(os.path.join(self.tgisdbase.GetValue(),self.listOfLocations[0]))
            mapset = self.GetRCValue("MAPSET")
            if  mapset: 
                self.lbmapsets.SetSelection(self.listOfMapsets.index(mapset))
                self.bstart.Enable(True)

    def __do_layout(self):
        label_style = wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_HORIZONTAL
        sizer = wx.BoxSizer(wx.VERTICAL)
        dbase_sizer=wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer = wx.FlexGridSizer(4, 3, 4, 4)
        mapset_sizer = wx.BoxSizer(wx.VERTICAL)

        dbase_sizer.Add(self.ldbase, 0, wx.ALIGN_CENTER_VERTICAL|
                wx.ALIGN_CENTER_HORIZONTAL, 1)
        dbase_sizer.Add(self.tgisdbase, 0,  wx.ALIGN_CENTER_VERTICAL
                |wx.ALIGN_CENTER_HORIZONTAL, 1)
        dbase_sizer.Add(self.bbrowse, 0, wx.ALIGN_CENTER_VERTICAL |
                wx.ALIGN_CENTER_HORIZONTAL, 1)

        mapset_sizer.Add(self.tnewmapset, 0, label_style, 1)
        mapset_sizer.Add(self.bmapset, 0, label_style, 1)
        mapset_sizer.Add(self.ldefine, 0, label_style, 1)
        mapset_sizer.Add(self.bgeoreferenced, 0, label_style, 1)
        mapset_sizer.Add(self.bepsg, 0, label_style, 1)
        mapset_sizer.Add(self.bwizard, 0, label_style, 1)

        grid_sizer.Add(self.llocation, 0,label_style , 1)
        grid_sizer.Add(self.lmapset, 0,label_style , 1)
        grid_sizer.Add(self.lcreate, 0,label_style , 1)

        grid_sizer.Add(self.lpanel, 0, wx.TOP |wx.ADJUST_MINSIZE, 0)
        grid_sizer.Add(self.mpanel, 0, wx.TOP |wx.ADJUST_MINSIZE, 0)
        grid_sizer.Add(mapset_sizer, 0, wx.TOP | wx.ADJUST_MINSIZE, 0)

        grid_sizer.Add(self.bstart, 0, wx.ADJUST_MINSIZE, 5)
        grid_sizer.Add(self.bexit, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer.Add(self.bhelp, 0, wx.ADJUST_MINSIZE, 0)

        # adding to main VERTICAL sizer
        sizer.Add(self.hbitmap, 0, wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL, 1) # image
        sizer.Add(self.lwelcome, # wellcomme message
                0,wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL, 1)  
        sizer.Add(dbase_sizer,0,wx.ADJUST_MINSIZE |
                wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL,0) # GISDBASE setting
        sizer.Add(grid_sizer, 1, wx.ADJUST_MINSIZE | wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer)
        sizer.Fit(self)
        sizer.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def OnWizard(self,event):
        import grass_wizard
        gWizard = grass_wizard.GWizard(self,  "Define new Location")

 
    def UpdateLocations(self,dbase):

        self.listOfLocations = []
        for location in glob.glob(os.path.join(dbase,"*")):
            try:
                glob.glob(os.path.join(location,"*")).index(os.path.join(location,"PERMANENT"))
                self.listOfLocations.append(os.path.basename(location))
            except:
                pass
        self.listOfLocations
        return self.listOfLocations

    def UpdateMapsets(self,location):

        self.listOfMapsets = []
        for mapset in glob.glob(os.path.join(location,"*")):
            if os.path.isdir(mapset):
                self.listOfMapsets.append(os.path.basename(mapset))
        return self.listOfMapsets
    
    def GetRCValue(self,value):
        global RC

        if RC.has_key(value) and RC[value]:
            return RC[value]
        else:
            return None

    def OnSelectLocation(self,event):
        if self.lblocations.GetSelection() > -1:
            self.UpdateMapsets(os.path.join(
                    self.tgisdbase.GetValue(),self.listOfLocations[self.lblocations.GetSelection()]))
        else:
            self.listOfMapsets = []
        self.lbmapsets.Clear()
        self.lbmapsets.InsertItems(self.listOfMapsets,0)

    def OnSelectMapset(self,event):
        self.bstart.Enable(True)

    def OnSetDatabase(self,event):
        self.UpdateLocations(self.tgisdbase.GetValue())
        self.lblocations.Clear()
        self.lblocations.InsertItems(self.listOfLocations,0)
        self.lblocations.SetSelection(0)
        self.OnSelectLocation(event)

    def OnBrowse(self, event): 
        
        grassdata = None

        dlg = wx.DirDialog(self, "Choose a GRASS directory:", 
                style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            grassdata = dlg.GetDirectory()
            self.tgisdbase.SetValue(grassdata)
        dlg.Destroy()

        self.OnSetDatabase(event)

    def OnKeyPressedInDbase(self,event):
        if wx.WXK_RETURN == event.KeyCode:
            self.OnSetDatabase(event)
        else:
            event.Skip()
    
    def OnCreateMapset(self,event):

        try:
            mapset = self.tnewmapset.GetValue()
            os.mkdir(os.path.join(
                self.tgisdbase.GetValue(),
                self.listOfLocations[self.lblocations.GetSelection()],
                mapset))
            self.OnSelectLocation(None)
            self.lbmapsets.SetSelection(self.listOfMapsets.index(mapset))
        except StandardError, e:
            dlg = wx.MessageDialog(self, "Could not create new mapset: %s"
                    % e,"Can not create mapset",  wx.OK|wx.ICON_INFORMATION)
            dlg.ShowModal()
            dlg.Destroy()

    def OnKeyPressedInMapset(self,event):
        if wx.WXK_RETURN == event.KeyCode:
            self.OnCreateMapset(None)
        else:
            self.bmapset.Enable(True)
            event.Skip()

    def OnGeoreferenced(self,event):
        NewLocation = GeoreferencedFile(self, -1, "Define new Location")
        NewLocation.Show()

    def OnEpsg(self,event):
        NewLocation = EpsgCode(self, -1, "Define new Location")
        NewLocation.Show()


    def OnStart(self, event):
        print "Event handler `OnStart' not implemented!"
        event.Skip()

    def OnExit(self, event): 
        self.Destroy()

    def OnHelp(self, event): 
        print "Event handler `OnHelp' not implemented!"
        #event.Skip()



class StartUp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        StartUp = GRASSStartup(None, -1, "")
        self.SetTopWindow(StartUp)
        StartUp.Show()
        return 1

# end of class StartUp

if __name__ == "__main__":

    if len(sys.argv) < 2:
        print "USAGE:\n python grass_startup.py /path/to/your/gisbase"
        sys.exit()
    read_grassrc()
    GRASSStartUp = StartUp(0)
    GRASSStartUp.MainLoop()
