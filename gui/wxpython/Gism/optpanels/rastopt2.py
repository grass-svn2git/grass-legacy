#!/usr/bin/env python
# -*- coding: US-ASCII -*-
# generated by wxGlade 0.4.1 on Sat Aug 19 10:10:44 2006

import wx
import os

iconpath = os.environ['GRASS_ICONPATH']

class MyPanel(wx.ScrolledWindow):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyPanel.__init__
		kwds["style"] = wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
		wx.ScrolledWindow.__init__(self, *args, **kwds)
		self.title = wx.StaticText(self, -1, _("Raster Layer Options"))
		self.opacity = wx.SpinCtrl(self, -1, "100", min=0, max=100, style=wx.SP_ARROW_KEYS|wx.TE_AUTO_URL|wx.TE_RIGHT)
		self.opacity_label = wx.StaticText(self, -1, _("opacity"), style=wx.ALIGN_RIGHT)
		self.help_button = wx.BitmapButton(self, -1, wx.Bitmap(iconpath+r"/gui-help.gif", wx.BITMAP_TYPE_ANY))
		self.static_line_1 = wx.StaticLine(self, -1)
		self.basemap_label = wx.StaticText(self, -1, _("Base map"))
		self.basemap_button = wx.BitmapButton(self, -1, wx.Bitmap(iconpath+r"/element-cell.gif", wx.BITMAP_TYPE_ANY))
		self.basemap_name = wx.TextCtrl(self, -1, _("self.rastname"))
		self.value_label = wx.StaticText(self, -1, _("values to display"))
		self.values = wx.TextCtrl(self, -1, _("self.rastvalues"))
		self.drapemap_label = wx.StaticText(self, -1, _("Drape map"))
		self.drapemap_button = wx.BitmapButton(self, -1, wx.Bitmap(iconpath+r"/element-cell.gif", wx.BITMAP_TYPE_ANY))
		self.drapemap_name = wx.TextCtrl(self, -1, _("self.rastname"), style=wx.HSCROLL)
		self.drapeinfo = wx.StaticText(self, -1, _("Optional color draping. Use base map for shading and\ndrape map for color relief or data fusion."), style=wx.ALIGN_CENTRE)
		self.overlay_rast = wx.CheckBox(self, -1, _("Overlay maps from other layers\n(transparent NULL value cells)"))
		self.combo_box_1 = wx.ComboBox(self, -1, choices=[_("none"), _("black"), _("white"), _("grey"), _("red"), _("orange"), _("yellow"), _("green"), _("aqua"), _("cyan"), _("blue"), _("violet"), _("brown")], style=wx.CB_DROPDOWN|wx.CB_READONLY)
		self.bkgrnd_label = wx.StaticText(self, -1, _("Set background color\n(for NULL value cells)"), style=wx.ALIGN_RIGHT)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPINCTRL, self.OnOpacity, self.opacity)
		self.Bind(wx.EVT_BUTTON, self.RastHelp, self.help_button)
		self.Bind(wx.EVT_BUTTON, self.OnSelRast, self.basemap_button)
		self.Bind(wx.EVT_TEXT_ENTER, self.SetBaseMap, self.basemap_name)
		self.Bind(wx.EVT_TEXT, self.SetBaseMap, self.basemap_name)
		self.Bind(wx.EVT_TEXT_ENTER, self.SetValues, self.values)
		self.Bind(wx.EVT_TEXT, self.SetValues, self.values)
		self.Bind(wx.EVT_BUTTON, self.OnSelRast, self.drapemap_button)
		self.Bind(wx.EVT_TEXT_ENTER, self.SetDrapeMap, self.drapemap_name)
		self.Bind(wx.EVT_TEXT, self.SetDrapeMap, self.drapemap_name)
		self.Bind(wx.EVT_TEXT, self.SetBkgrndColor, self.combo_box_1)
		# end wxGlade

		print "raster optpage"

	def __set_properties(self):
		# begin wxGlade: MyPanel.__set_properties
		self.SetSize((-1,-1))
		self.SetScrollRate(10, 10)
		self.title.SetFont(wx.Font(12, wx.MODERN, wx.SLANT, wx.BOLD, 0, ""))
		self.opacity.SetToolTipString(_("set layer opacity-transparency (0-100%)"))
		self.help_button.SetToolTipString(_("GRASS module documentation"))
		self.help_button.SetSize(self.help_button.GetBestSize())
		self.basemap_button.SetToolTipString(_("browse to select raster for base map"))
		self.basemap_button.SetSize(self.basemap_button.GetBestSize())
		self.basemap_name.SetMinSize((250, -1))
		self.basemap_name.SetToolTipString(_("raster base map"))
		self.values.SetMinSize((250, -1))
		self.values.SetToolTipString(_("raster values to display in base map"))
		self.drapemap_button.SetToolTipString(_("browse to select raster for drape map"))
		self.drapemap_button.SetSize(self.drapemap_button.GetBestSize())
		self.drapemap_name.SetMinSize((250, -1))
		self.drapemap_name.SetToolTipString(_("raster drape map"))
		self.overlay_rast.SetValue(1)
		self.combo_box_1.SetSelection(-1)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyPanel.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_1 = wx.FlexGridSizer(3, 2, 3, 3)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2.Add(self.title, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_2.Add(self.opacity, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 20)
		sizer_2.Add(self.opacity_label, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_2.Add(self.help_button, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 10)
		sizer_1.Add(sizer_2, 0, wx.TOP|wx.EXPAND|wx.ADJUST_MINSIZE, 10)
		sizer_1.Add(self.static_line_1, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
		sizer_3.Add(self.basemap_label, 1, wx.LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_3.Add(self.basemap_button, 0, wx.LEFT|wx.RIGHT|wx.EXPAND|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 5)
		grid_sizer_1.Add(sizer_3, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
		grid_sizer_1.Add(self.basemap_name, 1, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 5)
		sizer_4.Add((20, 20), 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		sizer_4.Add(self.value_label, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		grid_sizer_1.Add(sizer_4, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		grid_sizer_1.Add(self.values, 0, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 5)
		sizer_5.Add(self.drapemap_label, 1, wx.LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_5.Add(self.drapemap_button, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 5)
		grid_sizer_1.Add(sizer_5, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
		grid_sizer_1.Add(self.drapemap_name, 0, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE|wx.FIXED_MINSIZE, 5)
		grid_sizer_1.AddGrowableCol(1)
		grid_sizer_1.AddGrowableCol(2)
		sizer_1.Add(grid_sizer_1, 0, wx.LEFT|wx.RIGHT|wx.BOTTOM|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 5)
		sizer_6.Add((20, 20), 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.drapeinfo, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 5)
		sizer_1.Add(sizer_6, 0, 0, 0)
		sizer_7.Add(self.overlay_rast, 0, wx.LEFT|wx.TOP|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_1.Add(sizer_7, 0, 0, 0)
		sizer_8.Add(self.combo_box_1, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_8.Add(self.bkgrnd_label, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_1.Add(sizer_8, 0, wx.BOTTOM, 10)
		self.SetAutoLayout(True)
		self.SetSizer(sizer_1)
		# end wxGlade

	def OnOpacity(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `OnOpacity' not implemented!"
		event.Skip()

	def RastHelp(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `RastHelp' not implemented!"
		event.Skip()

	def OnSelRast(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `OnSelRast' not implemented!"
		event.Skip()

	def SetBaseMap(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `SetBaseMap' not implemented!"
		event.Skip()

	def SetValues(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `SetValues' not implemented!"
		event.Skip()

	def SetDrapeMap(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `SetDrapeMap' not implemented!"
		event.Skip()

	def SetBkgrndColor(self, event): # wxGlade: MyPanel.<event_handler>
		print "Event handler `SetBkgrndColor' not implemented!"
		event.Skip()

# end of class MyPanel




