#!/usr/bin/env python
# -*- coding: US-ASCII -*-
# generated by wxGlade 0.4.1 on Tue Oct 10 21:31:56 2006

import wx

class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.panel_1 = wx.Panel(self, -1)
		self.opacity = wx.Slider(self.panel_1, -1, 0, 0, 100, style=wx.SL_VERTICAL|wx.SL_AUTOTICKS)
		self.help = wx.BitmapButton(self.panel_1, -1, wx.Bitmap("/Applications/Grass/GRASS.app/Contents/Resources/etc/gui/icons/gui-help.gif", wx.BITMAP_TYPE_ANY))
		self.title = wx.StaticText(self.panel_1, -1, _("Raster layer options"))
		self.baselabel = wx.StaticText(self.panel_1, -1, _("Base map: "), style=wx.ST_NO_AUTORESIZE)
		self.rast_select = wx.BitmapButton(self.panel_1, -1, wx.Bitmap("/Applications/Grass/GRASS.app/Contents/Resources/etc/gui/icons/element-cell.gif", wx.BITMAP_TYPE_ANY))
		self.rasterbase = wx.TextCtrl(self.panel_1, -1, "")
		self.valuelabel = wx.StaticText(self.panel_1, -1, _("values to display"))
		self.dispvalues = wx.TextCtrl(self.panel_1, -1, "")
		self.drapeinfo = wx.StaticText(self.panel_1, -1, _("Optional color draping. Use base map for shading and drape map for color in color relief map or data fusion"))
		self.drapelabel = wx.StaticText(self.panel_1, -1, _("Drape map: "), style=wx.ST_NO_AUTORESIZE)
		self.drape_select = wx.BitmapButton(self.panel_1, -1, wx.Bitmap("/Applications/Grass/GRASS.app/Contents/Resources/etc/gui/icons/element-cell.gif", wx.BITMAP_TYPE_ANY))
		self.rasterdrape = wx.TextCtrl(self.panel_1, -1, "")
		self.overlay = wx.CheckBox(self.panel_1, -1, _("overlay maps from other layers (transparent NULL value cells"))
		self.bkclr_label = wx.StaticText(self.panel_1, -1, _("Set background color (for NULL value cells)"))
		self.back_color = wx.ComboBox(self.panel_1, -1, choices=[_("none"), _("white"), _("black"), _("grey"), _("red"), _("blue"), _("green"), _("violet")], style=wx.CB_DROPDOWN|wx.CB_READONLY)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_COMMAND_SCROLL, self.Opacity, self.opacity)
		self.Bind(wx.EVT_BUTTON, self.optHelp, self.help)
		self.Bind(wx.EVT_BUTTON, self.selectRaster, self.rast_select)
		self.Bind(wx.EVT_TEXT, self.setRastBase, self.rasterbase)
		self.Bind(wx.EVT_BUTTON, self.selectRaster, self.drape_select)
		self.Bind(wx.EVT_TEXT, self.setRastDrape, self.rasterdrape)
		self.Bind(wx.EVT_CHECKBOX, self.setOverlay, self.overlay)
		self.Bind(wx.EVT_TEXT, self.setBackColor, self.back_color)
		# end wxGlade
		self.Show(True)

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle(_("frame_1"))
		self.opacity.SetToolTipString(_("Set layer opacity - transparency"))
		self.help.SetSize(self.help.GetBestSize())
		self.title.SetFont(wx.Font(12, wx.MODERN, wx.NORMAL, wx.BOLD, 0, "Lucida Grande"))
		self.rast_select.SetToolTipString(_("Browse to select raster base map"))
		self.rast_select.SetSize(self.rast_select.GetBestSize())
		self.rasterbase.SetMinSize((250, -1))
		self.rasterbase.SetFocus()
		self.dispvalues.SetMinSize((250, -1))
		self.drapeinfo.SetMinSize((400, -1))
		self.drape_select.SetSize(self.drape_select.GetBestSize())
		self.rasterdrape.SetMinSize((250, -1))
		self.overlay.SetValue(1)
		self.back_color.SetToolTipString(_("Color for NULL value cells"))
		self.back_color.SetSelection(-1)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3 = wx.BoxSizer(wx.VERTICAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_5_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_4.Add(self.opacity, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 5)
		sizer_4.Add(self.help, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
		sizer_2.Add(sizer_4, 0, 0, 0)
		sizer_3.Add(self.title, 0, wx.LEFT|wx.BOTTOM|wx.ADJUST_MINSIZE, 5)
		sizer_5.Add(self.baselabel, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_5.Add(self.rast_select, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 15)
		sizer_5.Add(self.rasterbase, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 10)
		sizer_3.Add(sizer_5, 0, wx.LEFT, 5)
		sizer_6.Add((20, 20), 0, wx.ADJUST_MINSIZE, 0)
		sizer_6.Add(self.valuelabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_6.Add(self.dispvalues, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
		sizer_7.Add(self.drapeinfo, 1, wx.EXPAND|wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		sizer_3.Add(sizer_7, 1, wx.EXPAND, 0)
		sizer_5_copy.Add(self.drapelabel, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 5)
		sizer_5_copy.Add(self.drape_select, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 15)
		sizer_5_copy.Add(self.rasterdrape, 0, wx.LEFT|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 10)
		sizer_3.Add(sizer_5_copy, 1, wx.EXPAND, 0)
		sizer_3.Add(self.overlay, 0, wx.LEFT|wx.ADJUST_MINSIZE, 5)
		sizer_8.Add(self.bkclr_label, 0, wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		sizer_8.Add(self.back_color, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
		sizer_3.Add(sizer_8, 1, wx.EXPAND, 0)
		sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
		self.panel_1.SetAutoLayout(True)
		self.panel_1.SetSizer(sizer_2)
		sizer_2.Fit(self.panel_1)
		sizer_2.SetSizeHints(self.panel_1)
		sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
		self.SetAutoLayout(True)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		sizer_1.SetSizeHints(self)
		self.Layout()
		# end wxGlade

	def Opacity(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `Opacity' not implemented!"
		event.Skip()

	def optHelp(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `optHelp' not implemented!"
		event.Skip()

	def selectRaster(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `selectRaster' not implemented!"
		event.Skip()

	def setRastBase(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `setRastBase' not implemented!"
		event.Skip()

	def setRastDrape(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `setRastDrape' not implemented!"
		event.Skip()

	def setOverlay(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `setOverlay' not implemented!"
		event.Skip()

	def setBackColor(self, event): # wxGlade: MyFrame.<event_handler>
		print "Event handler `setBackColor' not implemented!"
		event.Skip()

# end of class MyFrame



